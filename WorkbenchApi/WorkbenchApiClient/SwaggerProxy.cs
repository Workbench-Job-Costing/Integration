// This file was generated by Birch.Swagger.ProxyGenerator
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Net;
using System.Threading.Tasks;
using System.Net.Http;
using System.Net.Http.Headers;
using WorkbenchApiClient;

namespace WorkbenchApiClient
{
    public abstract class ProxyGeneratorBaseProxy
    {
        protected readonly Uri BaseUrl;
        public readonly List<Action<BeforeRequestActionArgs>> GlobalBeforeRequestActions;
        public readonly List<Action<IWebProxyResponse>> GlobalAfterRequestActions;
        public readonly List<Action<BeforeRequestActionArgs>> BeforeRequestActions;
        public readonly List<Action<IWebProxyResponse>> AfterRequestActions;

        protected ProxyGeneratorBaseProxy(Uri baseUrl)
        {
            BaseUrl = baseUrl;
            GlobalBeforeRequestActions = new List<Action<BeforeRequestActionArgs>>();
            GlobalAfterRequestActions = new List<Action<IWebProxyResponse>>();
            BeforeRequestActions = new List<Action<BeforeRequestActionArgs>>();
            AfterRequestActions = new List<Action<IWebProxyResponse>>();
        }

        /// <summary>
        /// Builds the HTTP client.
        /// </summary>
        /// <returns></returns>
        protected virtual HttpClient BuildHttpClient()
        {
            var httpClient = new HttpClient
            {
                BaseAddress = BaseUrl
            };
            return httpClient;
        }
        
        /// <summary>
        /// Runs before the request asynchronous.
        /// </summary>
        /// <param name="requestUri">The request URI.</param>
        /// <param name="requestMethod">The request method.</param>
        /// <returns></returns>
        public virtual Task BeforeRequestAsync(BeforeRequestActionArgs actionArgs)
        {
            foreach (var globalBeforeRequestAction in GlobalBeforeRequestActions)
            {
                globalBeforeRequestAction.Invoke(actionArgs);
            }

            foreach (var beforeRequestAction in BeforeRequestActions)
            {
                beforeRequestAction.Invoke(actionArgs);
            }
            BeforeRequestActions.Clear();
            return Task.FromResult(0);
        }

        /// <summary>
        /// Runs After the request asynchronous.
        /// </summary>
        /// <param name="response">The response.</param>
        /// <param name="webProxyResponse">The web proxy response.</param>
        /// <returns></returns>
        public virtual async Task AfterRequestAsync(IWebProxyResponse webProxyResponse)
        {
            foreach (var globalAfterRequestAction in GlobalAfterRequestActions)
            {
                globalAfterRequestAction.Invoke(webProxyResponse);
            }

            foreach (var afterRequestAction in AfterRequestActions)
            {
                afterRequestAction.Invoke(webProxyResponse);
            }
            AfterRequestActions.Clear();

            if (webProxyResponse.Response.IsSuccessStatusCode)
            {
                return;
            }

            try
            {
                var content = await webProxyResponse.Response.Content.ReadAsStringAsync().ConfigureAwait(false);
                webProxyResponse.Exception = new SimpleHttpResponseException(webProxyResponse.Response.StatusCode, content);
            }
            finally
            {
                webProxyResponse.Response.Content?.Dispose();
            }
        }

        /// <summary>
        /// Appends the query.
        /// </summary>
        /// <param name="currentUrl">The current URL.</param>
        /// <param name="paramName">Name of the parameter.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        protected string AppendQuery(string currentUrl, string paramName, string value)
        {
            if (currentUrl.Contains("?"))
            {
                currentUrl += string.Format("&{0}={1}", paramName, Uri.EscapeUriString(value));
            }
            else
            {
                currentUrl += string.Format("?{0}={1}", paramName, Uri.EscapeUriString(value));
            }
            return currentUrl;
        }
        public class WebProxyResponse<T> : IWebProxyResponse
        {
            public HttpResponseMessage Response { get; set; }
            public TimeSpan RequestDuration { get; set; }
            public Type ExpectedResponseType { get; set; }
            public T Body { get; set; }
            public Exception Exception { get; set; }
        }
        public class WebProxyResponse : IWebProxyResponse
        {
            public HttpResponseMessage Response { get; set; }
            public TimeSpan RequestDuration { get; set; }
            public Type ExpectedResponseType { get; set; }
            public Exception Exception { get; set; }
        }
        public interface IWebProxyResponse
        {
            HttpResponseMessage Response { get; set; }
            TimeSpan RequestDuration { get; set; }
            Type ExpectedResponseType { get; set; }
            Exception Exception { get; set; }
        }
        public class BeforeRequestActionArgs
        {
            public string Uri { get; set; }
            public string ActionName { get; set; }
            public string Method { get; set; }
        }

        public class SimpleHttpResponseException : Exception
        {
            public HttpStatusCode StatusCode { get; private set; }

            public SimpleHttpResponseException(HttpStatusCode statusCode, string content)
            : base(content)
            {
                StatusCode = statusCode;
            }
        }
    }
}
// /swagger/docs/v1 Proxy
namespace WorkbenchApiClient.Swagger {
    public interface IAccountApiWebProxy
    {
        Task<AccountApiModel> Get();
    }
    public interface IActivityListApiWebProxy
    {
        Task<GridResult_AdminActivityLine> Post(GridRequestParametersApi options);
    }
    public interface IActivityLookupApiWebProxy
    {
        Task<GridResult_LookupsActivityLine> Post(GridRequestParametersApi options);
    }
    public interface IAPCreditDetailApiWebProxy
    {
        Task<APInvoiceJobTransactionApi> Get(int? aPInvoiceId = null, int? batchNo = null, string batchType = null, int? pONo = null, int? companyId = null, int? personId = null, bool? isApCredit = null, string fileUrl = null, bool? completed = null);
        Task<APInvoiceJobTransactionApi> Post(APInvoiceJobTransactionApi model);
        Task<APInvoiceJobTransactionApi> Delete(APProcessingAPInvoiceKey key);
    }
    public interface IAPInvoiceApprovalApiWebProxy
    {
        Task<SaveResult> Post(APProcessingAPInvoiceKey model);
    }
    public interface IAPInvoiceDetailApiWebProxy
    {
        Task<APInvoiceJobTransactionApi> Get(int? aPInvoiceId = null, int? batchNo = null, string batchType = null, int? pONo = null, int? companyId = null, int? personId = null, bool? isApCredit = null, string fileUrl = null, bool? completed = null);
        Task<APInvoiceJobTransactionApi> Post(APInvoiceJobTransactionApi model);
        Task<APInvoiceJobTransactionApi> Delete(APProcessingAPInvoiceKey key);
    }
    public interface IAPInvoiceListApiWebProxy
    {
        Task<GridResult_APProcessingAPInvoiceLine> Post(GridRequestParametersApi options);
    }
    public interface IAPInvoicePurchaseOrderDetailApiWebProxy
    {
        Task<APInvoicePurchaseOrderApi> Get(int? aPInvoiceId = null, int? batchNo = null, string batchType = null, int? pONo = null, int? companyId = null, int? personId = null, bool? isApCredit = null, string fileUrl = null, bool? completed = null);
        Task<APInvoicePurchaseOrderApi> Post(APInvoicePurchaseOrderApi model);
        Task<APInvoicePurchaseOrderApi> Delete(APProcessingAPInvoiceKey key);
    }
    public interface IAPInvoiceUnapprovalApiWebProxy
    {
        Task<SaveResult> Post(APProcessingAPInvoiceKey model);
    }
    public interface IBatchDetailApiWebProxy
    {
        Task<JobTransactionApiModel> Get(int? batchNo = null, string batchType = null);
        Task<JobTransactionApiModel> Post(JobTransactionApiModel changedModel);
        Task<JobTransactionApiModel> Delete(JobTransactionsJobTransactionKey key);
    }
    public interface IBatchListApiWebProxy
    {
        Task<SystemBatchApiModel> Get(string batchType = null, DateTime? docDate = null, string locationCode = null, string finCoCode = null, string batchGroup = null);
        Task<GridResult_BatchBatchLine> Post(GridRequestParametersApi options);
    }
    public interface ICompanyDetailApiWebProxy
    {
        Task<CompanyApiModel> Get(int? companyId = null);
        Task<CompanyApiModel> Post(CompanyApiModel model);
        Task<CompanyApiModel> Delete(int? companyId = null);
    }
    public interface ICompanyListApiWebProxy
    {
        Task<GridResult_GeneralCompanyLine> Get();
        Task<GridResult_GeneralCompanyLine> Post(GridRequestParametersApi options);
    }
    public interface IControlParametersApiWebProxy
    {
        Task<ControlParameterApiModel> Get();
    }
    public interface IDataImportDetailApiWebProxy
    {
        Task<DataImportApiModel> Get(int? importId = null);
        Task<DataImportApiModel> Post(DataImportApiModel model);
    }
    public interface IDataImportListApiWebProxy
    {
        Task<GridResult_AdminImportHeaderLine> Post(GridRequestParametersApi options);
    }
    public interface IDatasheetDetailApiWebProxy
    {
        Task<DatasheetApiModel> Get(int? datasheetId = null, int? datasheetTemplateId = null);
        Task<DatasheetApiModel> Post(DatasheetApiModel model);
        Task<DatasheetApiModel> Delete(DatasheetsDatasheetKey key);
    }
    public interface IDatasheetListApiWebProxy
    {
        Task<SaveResult> Put(DatasheetsDialogFields model);
        Task<GridResult_DatasheetsDatasheetModelLine> Post(GridRequestParametersApi options);
    }
    public interface IDatasheetTemplateListApiWebProxy
    {
        Task<GridResult_DatasheetsTemplateLine> Post(GridRequestParametersApi options);
    }
    public interface IGridManagementApiWebProxy
    {
        Task<GridModel> Get(string layoutName = null);
        Task<GridModel> Post(GridModel model);
        Task<GridModel> Delete(Api_Controllers_GridApiKey key);
    }
    public interface IJobBudgetDetailApiWebProxy
    {
        Task<JobBudgetApiModel> Get(string jobCode = null, int? estimateId = null, int? estimateLineId = null, double? bomQuantity = null, bool? isJournal = null);
        Task<JobBudgetApiModel> Post(JobBudgetApiModel changedModel);
        Task<JobBudgetApiModel> Delete(BudgetJobBudgetKey key);
    }
    public interface IJobBudgetListApiWebProxy
    {
        Task<GridResult_BudgetJobBudgetLine> Post(GridRequestParametersApi options);
    }
    public interface IJobDetailApiWebProxy
    {
        Task<JobApiModel> Get(string jobCode = null);
        Task<JobApiModel> Post(JobApiModel model);
        Task<JobApiModel> Delete(GeneralJobKey key);
    }
    public interface IJobListApiWebProxy
    {
        Task<GridResult_GeneralJobLine> Post(GridRequestParametersApi options);
    }
    public interface IJobMaintenanceApiWebProxy
    {
        Task<JobMaintenanceApiModel> Get(string jobCode = null);
        Task<JobMaintenanceApiModel> Post(JobMaintenanceApiModel model);
        Task<JobMaintenanceApiModel> Delete(JobsMaintenanceKey key);
    }
    public interface ILogErrorApiWebProxy
    {
        Task<LogErrorApiModel> Post(LogErrorApiModel model);
    }
    public interface ILogHeaderApiWebProxy
    {
        Task<LogHeaderApiModel> Get(int? logHeaderId = null);
        Task<LogHeaderApiModel> Post(LogHeaderApiModel model);
        Task<LogHeaderApiModel> Delete(TabletLogMaintenanceKey key);
    }
    public interface ILogListApiWebProxy
    {
        Task<GridResult_ServiceDeskLine> Post(GridRequestParametersApi options);
    }
    public interface ILogMaintenanceApiWebProxy
    {
        Task<LogApiModel> Get(int? logHeaderId = null);
        Task<LogApiModel> Put(LogApiModel model);
        Task<LogApiModel> Post(LogApiModel model);
        Task<LogApiModel> Delete(TabletLogMaintenanceKey key);
    }
    public interface ILogServiceAgreementApiWebProxy
    {
        Task<LogServiceAgreementApiKey> Put(int? serviceAgreementID = null, string serviceAgreementCode = null, string orderNo = null);
    }
    public interface IPeopleDetailApiWebProxy
    {
        Task<PeopleApiModel> Get(int? personId = null);
        Task<PeopleApiModel> Post(PeopleApiModel model);
        Task<PeopleApiModel> Delete(int? personId = null);
    }
    public interface IPeopleListApiWebProxy
    {
        Task<GridResult_GeneralPersonLine> Post(GridRequestParametersApi options);
    }
    public interface IPlantListApiWebProxy
    {
        Task<GridResult_PlantPlantItemLine> Post(GridRequestParametersApi options);
    }
    public interface IPlantLookupApiWebProxy
    {
        Task<GridResult_LookupsPlantLineModel> Post(GridRequestParametersApi options);
    }
    public interface IPurchaseOrderDefaultsApiWebProxy
    {
        Task<PurchaseOrdersDetailLine> Get(int? purchaseOrderLineId = null, int? purchaserId = null, string finCoCode = null, string jobCode = null, int? lineCode = null, string activityCode = null, string workCentreCode = null, string gstTypeCode = null);
    }
    public interface IPurchaseOrderDetailApiWebProxy
    {
        Task<PurchaseOrderApiModel> Get(int? pONumber = null);
        Task<PurchaseOrderApiModel> Put(PurchaseOrderApiModel model);
        Task<PurchaseOrderApiModel> Post(PurchaseOrderApiModel model);
        Task<PurchaseOrderApiModel> Delete(PurchaseOrdersKey key);
    }
    public interface IPurchaseOrderListApiWebProxy
    {
        Task<GridResult_PurchaseOrdersListItem> Post(GridRequestParametersApi options);
    }
    public interface IQuoteDetailApiWebProxy
    {
        Task<QuoteApiModel> Get(int? quoteID = null, string quoteNo = null, string currencyCode = null, int? clientId = null, bool? isNew = null);
        Task<QuoteApiModel> Post(QuoteApiModel changedModel);
        Task<QuoteApiModel> Delete(QuotesQuoteKey key);
    }
    public interface IQuoteLineLabourSellingRateWebProxy
    {
        Task<QuoteLineSellingRateModel> Get(string priceCode = null, string activityCode = null, string employeeClassCode = null, int? personId = null);
    }
    public interface IQuoteLineMaterialSellingRateWebProxy
    {
        Task<QuoteLineSellingRateModel> Get(string priceCode = null, string lineType = null, int? itemId = null, int? catalogueLineId = null, string activityCode = null, string rateCode = null);
    }
    public interface IQuoteLinePlantSellingRateWebProxy
    {
        Task<QuoteLineSellingRateModel> Get(string priceCode = null, int? itemId = null, string activityCode = null, string rateCode = null);
    }
    public interface IQuoteListApiWebProxy
    {
        Task<GridResult_QuotesListLine> Post(GridRequestParametersApi options);
    }
    public interface IScaffoldDetailApiWebProxy
    {
        Task<ScaffoldTableDataLine> Get(string stringId = null, int? intId = null, DateTime? dateId = null, string stringId1 = null, int? intId1 = null, DateTime? dateId1 = null, string name = null, string keyName = null, string keyName1 = null, bool? sortDesc = null);
        Task<ScaffoldTableDataLine> Put(ScaffoldTableDataLine model);
        Task<ScaffoldTableDataLine> Post(ScaffoldTableDataLine model);
        Task<ScaffoldTableDataLine> Delete(ScaffoldTableDataKey key);
    }
    public interface IScaffoldListApiWebProxy
    {
        Task<GridResult_ScaffoldTableDataLine> Post(GridRequestParametersApi options);
    }
    public interface IScaffoldLiteApiWebProxy
    {
        Task<ScaffoldTableDataLite> Get(string stringId = null, int? intId = null, DateTime? dateId = null, string stringId1 = null, int? intId1 = null, DateTime? dateId1 = null, string name = null, string keyName = null, string keyName1 = null, bool? sortDesc = null);
        Task<ScaffoldTableDataLite> Put(ScaffoldTableDataLite model);
        Task<ScaffoldTableDataLite> Post(ScaffoldTableDataLite model);
        Task<ScaffoldTableDataLite> Delete(ScaffoldTableDataKey key);
    }
    public interface ISiteMapApiWebProxy
    {
        Task<SiteMapProfileApiModel> Get();
    }
    public interface IStoredFilesApiWebProxy
    {
        Task<StoredFilesApiModel> Get(int? storedFileId = null);
        Task<StoredFilesApiModel> Post(Web_Lib_FileUpload_StoredFilesApiModel model);
        Task<StoredFilesApiModel> Delete(int? storedFileId = null);
    }
    public interface IStoredFilesContentApiWebProxy
    {
        Task<object> Get(int? storedFileId = null);
    }
    public interface ISubContractClaimApprovalApiWebProxy
    {
        Task<SubContractsSubContractClaimSaveResult> Post(SubContractClaimApiKey key);
    }
    public interface ISubContractClaimDetailApiWebProxy
    {
        Task<SubContractClaimApiModel> Get(string subContractCode = null, int? aPInvoiceID = null, string jobCode = null, int? subContractCompID = null);
        Task<SubContractClaimApiModel> Post(SubContractClaimApiModel model);
        Task<SubContractClaimApiModel> Delete(string subContractCode = null, int? aPInvoiceID = null, string jobCode = null, int? subContractCompID = null);
    }
    public interface ISubContractClaimEntryApiWebProxy
    {
        Task<SubContractClaimEntryApiModel> Get(string subContractCode = null, int? apInvoiceId = null);
        Task<SubContractClaimEntryApiModel> Post(SubContractClaimEntryApiModel model);
        Task<SubContractClaimEntryApiModel> Delete(string subContractCode = null, int? apInvoiceId = null, string dialogId = null, string gridId = null);
    }
    public interface ISubContractClaimListApiWebProxy
    {
        Task<GridResult_SubContractsSubContractClaimLine> Post(GridRequestParametersApi options);
    }
    public interface ISubContractClaimUnapprovalApiWebProxy
    {
        Task<SubContractsSubContractClaimSaveResult> Post(SubContractClaimApiKey key);
    }
    public interface ISubContractListApiWebProxy
    {
        Task<GridResult_SubContractsSubContractLine> Post(GridRequestParametersApi options);
    }
    public interface ITableApiWebProxy
    {
        Task<GridResult_TableApiResponse> Post(TableApiRequest options);
    }
    public interface ITableRowApiWebProxy
    {
        Task<TableApiResponse> Get(string tableName = null, string keyName = null, string keyValue = null, string columnNames = null);
        Task<TableApiResponse> Put(TableApiLine model);
        Task<TableApiResponse> Post(TableApiLine model);
        Task<TableApiResponse> Delete(TableApiKey key);
    }
    public interface ITimesheetAttendanceApiWebProxy
    {
        Task<GridResult_TimesheetsAttendanceLine> Post(GridRequestParametersApi options);
    }
    public interface ITimesheetDefaultsApiWebProxy
    {
        Task<TimesheetsDetailDefaults> Get(int? jobTranId = null, int? personId = null, string finCoCode = null, string jobCode = null, string activityCode = null, string workCentreCode = null, string activityType = null, string activitySubType = null, string timeCode = null, string costType = null, double? costRate = null, double? gstRate = null, int? statusFlag = null, DateTime? tranDate = null, string employeeClass = null);
    }
    public interface ITimesheetDetailApiWebProxy
    {
        Task<TimesheetApiModel> Get(int? personId = null, DateTime? timesheetDate = null, TimesheetDetailApiWebProxy.GetfunctionalCode functionalCode = TimesheetDetailApiWebProxy.GetfunctionalCode.General);
        Task<TimesheetApiModel> Post(TimesheetApiModel model);
        Task<TimesheetApiModel> Delete(TimesheetApiKey key);
    }
    public interface ITimesheetListApiWebProxy
    {
        Task<GridResult_TimesheetsListItem> Post(GridRequestParametersApi options);
    }
    public interface IUploadFileApiWebProxy
    {
        Task<UploadedFileApiModel> UploadImage(Tuple<string, byte[]> file, string relatedRecordId, string relatedRecordType, string fileName = null);
    }
    public interface IWorkBreakDownApiWebProxy
    {
        Task<WorkBreakDownApiModel> Get(DateTime? updateDate);
    }
    public interface IWorkCentreListApiWebProxy
    {
        Task<GridResult_AdminWorkCentreLine> Post(GridRequestParametersApi options);
    }
    public interface IWorkCentreLookupApiWebProxy
    {
        Task<GridResult_LookupsWorkCentreLine> Post(GridRequestParametersApi options);
    }
    /// <summary>
    /// Web Proxy for AccountApi
    /// </summary>
    public class AccountApiWebProxy : BaseProxy, IAccountApiWebProxy
    {
        public AccountApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        public async Task<AccountApiModel> Get()
        {
            var url = "api/AccountApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<AccountApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(AccountApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<AccountApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for ActivityListApi
    /// </summary>
    public class ActivityListApiWebProxy : BaseProxy, IActivityListApiWebProxy
    {
        public ActivityListApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="options"></param>
        public async Task<GridResult_AdminActivityLine> Post(GridRequestParametersApi options)
        {
            var url = "api/ActivityListApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, options).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_AdminActivityLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_AdminActivityLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_AdminActivityLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for ActivityLookupApi
    /// </summary>
    public class ActivityLookupApiWebProxy : BaseProxy, IActivityLookupApiWebProxy
    {
        public ActivityLookupApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="options"></param>
        public async Task<GridResult_LookupsActivityLine> Post(GridRequestParametersApi options)
        {
            var url = "api/ActivityLookupApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, options).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_LookupsActivityLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_LookupsActivityLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_LookupsActivityLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for APCreditDetailApi
    /// </summary>
    public class APCreditDetailApiWebProxy : BaseProxy, IAPCreditDetailApiWebProxy
    {
        public APCreditDetailApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="aPInvoiceId"></param>
        /// <param name="batchNo"></param>
        /// <param name="batchType"></param>
        /// <param name="pONo"></param>
        /// <param name="companyId"></param>
        /// <param name="personId"></param>
        /// <param name="isApCredit"></param>
        /// <param name="fileUrl"></param>
        /// <param name="completed"></param>
        public async Task<APInvoiceJobTransactionApi> Get(int? aPInvoiceId = null, int? batchNo = null, string batchType = null, int? pONo = null, int? companyId = null, int? personId = null, bool? isApCredit = null, string fileUrl = null, bool? completed = null)
        {
            var url = "api/APCreditDetailApi"
            ;
            if (aPInvoiceId.HasValue){
                url = AppendQuery(url, "aPInvoiceId", aPInvoiceId.ToString());
            }
            if (batchNo.HasValue){
                url = AppendQuery(url, "batchNo", batchNo.ToString());
            }
            if (batchType != null){
                url = AppendQuery(url, "batchType", batchType.ToString());
            }
            if (pONo.HasValue){
                url = AppendQuery(url, "pONo", pONo.ToString());
            }
            if (companyId.HasValue){
                url = AppendQuery(url, "companyId", companyId.ToString());
            }
            if (personId.HasValue){
                url = AppendQuery(url, "personId", personId.ToString());
            }
            if (isApCredit != null){
                url = AppendQuery(url, "isApCredit", isApCredit.ToString());
            }
            if (fileUrl != null){
                url = AppendQuery(url, "fileUrl", fileUrl.ToString());
            }
            if (completed != null){
                url = AppendQuery(url, "completed", completed.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<APInvoiceJobTransactionApi>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(APInvoiceJobTransactionApi)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<APInvoiceJobTransactionApi>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model"></param>
        public async Task<APInvoiceJobTransactionApi> Post(APInvoiceJobTransactionApi model)
        {
            var url = "api/APCreditDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<APInvoiceJobTransactionApi>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(APInvoiceJobTransactionApi)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<APInvoiceJobTransactionApi>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="key"></param>
        public async Task<APInvoiceJobTransactionApi> Delete(APProcessingAPInvoiceKey key)
        {
            var url = "api/APCreditDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Delete",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<APInvoiceJobTransactionApi>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(APInvoiceJobTransactionApi)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<APInvoiceJobTransactionApi>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for APInvoiceApprovalApi
    /// </summary>
    public class APInvoiceApprovalApiWebProxy : BaseProxy, IAPInvoiceApprovalApiWebProxy
    {
        public APInvoiceApprovalApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="model">Provide APInvoice ID to approve, and the approver Person ID</param>
        public async Task<SaveResult> Post(APProcessingAPInvoiceKey model)
        {
            var url = "api/APInvoiceApprovalApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<SaveResult>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(SaveResult)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<SaveResult>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for APInvoiceDetailApi
    /// </summary>
    public class APInvoiceDetailApiWebProxy : BaseProxy, IAPInvoiceDetailApiWebProxy
    {
        public APInvoiceDetailApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="aPInvoiceId"></param>
        /// <param name="batchNo"></param>
        /// <param name="batchType"></param>
        /// <param name="pONo"></param>
        /// <param name="companyId"></param>
        /// <param name="personId"></param>
        /// <param name="isApCredit"></param>
        /// <param name="fileUrl"></param>
        /// <param name="completed"></param>
        public async Task<APInvoiceJobTransactionApi> Get(int? aPInvoiceId = null, int? batchNo = null, string batchType = null, int? pONo = null, int? companyId = null, int? personId = null, bool? isApCredit = null, string fileUrl = null, bool? completed = null)
        {
            var url = "api/APInvoiceDetailApi"
            ;
            if (aPInvoiceId.HasValue){
                url = AppendQuery(url, "aPInvoiceId", aPInvoiceId.ToString());
            }
            if (batchNo.HasValue){
                url = AppendQuery(url, "batchNo", batchNo.ToString());
            }
            if (batchType != null){
                url = AppendQuery(url, "batchType", batchType.ToString());
            }
            if (pONo.HasValue){
                url = AppendQuery(url, "pONo", pONo.ToString());
            }
            if (companyId.HasValue){
                url = AppendQuery(url, "companyId", companyId.ToString());
            }
            if (personId.HasValue){
                url = AppendQuery(url, "personId", personId.ToString());
            }
            if (isApCredit != null){
                url = AppendQuery(url, "isApCredit", isApCredit.ToString());
            }
            if (fileUrl != null){
                url = AppendQuery(url, "fileUrl", fileUrl.ToString());
            }
            if (completed != null){
                url = AppendQuery(url, "completed", completed.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<APInvoiceJobTransactionApi>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(APInvoiceJobTransactionApi)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<APInvoiceJobTransactionApi>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model">Accepts previously created AP Invoice</param>
        public async Task<APInvoiceJobTransactionApi> Post(APInvoiceJobTransactionApi model)
        {
            var url = "api/APInvoiceDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<APInvoiceJobTransactionApi>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(APInvoiceJobTransactionApi)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<APInvoiceJobTransactionApi>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="key"></param>
        public async Task<APInvoiceJobTransactionApi> Delete(APProcessingAPInvoiceKey key)
        {
            var url = "api/APInvoiceDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Delete",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<APInvoiceJobTransactionApi>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(APInvoiceJobTransactionApi)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<APInvoiceJobTransactionApi>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for APInvoiceListApi
    /// </summary>
    public class APInvoiceListApiWebProxy : BaseProxy, IAPInvoiceListApiWebProxy
    {
        public APInvoiceListApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="options"></param>
        public async Task<GridResult_APProcessingAPInvoiceLine> Post(GridRequestParametersApi options)
        {
            var url = "api/APInvoiceListApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, options).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_APProcessingAPInvoiceLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_APProcessingAPInvoiceLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_APProcessingAPInvoiceLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for APInvoicePurchaseOrderDetailApi
    /// </summary>
    public class APInvoicePurchaseOrderDetailApiWebProxy : BaseProxy, IAPInvoicePurchaseOrderDetailApiWebProxy
    {
        public APInvoicePurchaseOrderDetailApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="aPInvoiceId"></param>
        /// <param name="batchNo"></param>
        /// <param name="batchType"></param>
        /// <param name="pONo"></param>
        /// <param name="companyId"></param>
        /// <param name="personId"></param>
        /// <param name="isApCredit"></param>
        /// <param name="fileUrl"></param>
        /// <param name="completed"></param>
        public async Task<APInvoicePurchaseOrderApi> Get(int? aPInvoiceId = null, int? batchNo = null, string batchType = null, int? pONo = null, int? companyId = null, int? personId = null, bool? isApCredit = null, string fileUrl = null, bool? completed = null)
        {
            var url = "api/APInvoicePurchaseOrderDetailApi"
            ;
            if (aPInvoiceId.HasValue){
                url = AppendQuery(url, "aPInvoiceId", aPInvoiceId.ToString());
            }
            if (batchNo.HasValue){
                url = AppendQuery(url, "batchNo", batchNo.ToString());
            }
            if (batchType != null){
                url = AppendQuery(url, "batchType", batchType.ToString());
            }
            if (pONo.HasValue){
                url = AppendQuery(url, "pONo", pONo.ToString());
            }
            if (companyId.HasValue){
                url = AppendQuery(url, "companyId", companyId.ToString());
            }
            if (personId.HasValue){
                url = AppendQuery(url, "personId", personId.ToString());
            }
            if (isApCredit != null){
                url = AppendQuery(url, "isApCredit", isApCredit.ToString());
            }
            if (fileUrl != null){
                url = AppendQuery(url, "fileUrl", fileUrl.ToString());
            }
            if (completed != null){
                url = AppendQuery(url, "completed", completed.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<APInvoicePurchaseOrderApi>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(APInvoicePurchaseOrderApi)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<APInvoicePurchaseOrderApi>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model"></param>
        public async Task<APInvoicePurchaseOrderApi> Post(APInvoicePurchaseOrderApi model)
        {
            var url = "api/APInvoicePurchaseOrderDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<APInvoicePurchaseOrderApi>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(APInvoicePurchaseOrderApi)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<APInvoicePurchaseOrderApi>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="key"></param>
        public async Task<APInvoicePurchaseOrderApi> Delete(APProcessingAPInvoiceKey key)
        {
            var url = "api/APInvoicePurchaseOrderDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Delete",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<APInvoicePurchaseOrderApi>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(APInvoicePurchaseOrderApi)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<APInvoicePurchaseOrderApi>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for APInvoiceUnapprovalApi
    /// </summary>
    public class APInvoiceUnapprovalApiWebProxy : BaseProxy, IAPInvoiceUnapprovalApiWebProxy
    {
        public APInvoiceUnapprovalApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="model">Provide APInvoice ID to unapprove, and the unapprover Person ID</param>
        public async Task<SaveResult> Post(APProcessingAPInvoiceKey model)
        {
            var url = "api/APInvoiceUnapprovalApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<SaveResult>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(SaveResult)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<SaveResult>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for BatchDetailApi
    /// </summary>
    public class BatchDetailApiWebProxy : BaseProxy, IBatchDetailApiWebProxy
    {
        public BatchDetailApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="batchNo"></param>
        /// <param name="batchType"></param>
        public async Task<JobTransactionApiModel> Get(int? batchNo = null, string batchType = null)
        {
            var url = "api/BatchDetailApi"
            ;
            if (batchNo.HasValue){
                url = AppendQuery(url, "batchNo", batchNo.ToString());
            }
            if (batchType != null){
                url = AppendQuery(url, "batchType", batchType.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<JobTransactionApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(JobTransactionApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<JobTransactionApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="changedModel"></param>
        public async Task<JobTransactionApiModel> Post(JobTransactionApiModel changedModel)
        {
            var url = "api/BatchDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, changedModel).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<JobTransactionApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(JobTransactionApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<JobTransactionApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="key"></param>
        public async Task<JobTransactionApiModel> Delete(JobTransactionsJobTransactionKey key)
        {
            var url = "api/BatchDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Delete",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<JobTransactionApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(JobTransactionApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<JobTransactionApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for BatchListApi
    /// </summary>
    public class BatchListApiWebProxy : BaseProxy, IBatchListApiWebProxy
    {
        public BatchListApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="batchType"></param>
        /// <param name="docDate"></param>
        /// <param name="locationCode"></param>
        /// <param name="finCoCode"></param>
        /// <param name="batchGroup"></param>
        public async Task<SystemBatchApiModel> Get(string batchType = null, DateTime? docDate = null, string locationCode = null, string finCoCode = null, string batchGroup = null)
        {
            var url = "api/BatchListApi"
            ;
            if (batchType != null){
                url = AppendQuery(url, "batchType", batchType.ToString());
            }
            if (docDate != null){
                url = AppendQuery(url, "docDate", docDate.ToString());
            }
            if (locationCode != null){
                url = AppendQuery(url, "locationCode", locationCode.ToString());
            }
            if (finCoCode != null){
                url = AppendQuery(url, "finCoCode", finCoCode.ToString());
            }
            if (batchGroup != null){
                url = AppendQuery(url, "batchGroup", batchGroup.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<SystemBatchApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(SystemBatchApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<SystemBatchApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="options"></param>
        public async Task<GridResult_BatchBatchLine> Post(GridRequestParametersApi options)
        {
            var url = "api/BatchListApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, options).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_BatchBatchLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_BatchBatchLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_BatchBatchLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for CompanyDetailApi
    /// </summary>
    public class CompanyDetailApiWebProxy : BaseProxy, ICompanyDetailApiWebProxy
    {
        public CompanyDetailApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="companyId"></param>
        public async Task<CompanyApiModel> Get(int? companyId = null)
        {
            var url = "api/CompanyDetailApi"
            ;
            if (companyId.HasValue){
                url = AppendQuery(url, "companyId", companyId.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<CompanyApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(CompanyApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<CompanyApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model">If Key.CompanyID=0 it will create a new company.</param>
        public async Task<CompanyApiModel> Post(CompanyApiModel model)
        {
            var url = "api/CompanyDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<CompanyApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(CompanyApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<CompanyApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="companyId"></param>
        public async Task<CompanyApiModel> Delete(int? companyId = null)
        {
            var url = "api/CompanyDetailApi"
            ;
            if (companyId.HasValue){
                url = AppendQuery(url, "companyId", companyId.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Delete",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<CompanyApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(CompanyApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<CompanyApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for CompanyListApi
    /// </summary>
    public class CompanyListApiWebProxy : BaseProxy, ICompanyListApiWebProxy
    {
        public CompanyListApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        public async Task<GridResult_GeneralCompanyLine> Get()
        {
            var url = "api/CompanyListApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_GeneralCompanyLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_GeneralCompanyLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_GeneralCompanyLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="options"></param>
        public async Task<GridResult_GeneralCompanyLine> Post(GridRequestParametersApi options)
        {
            var url = "api/CompanyListApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, options).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_GeneralCompanyLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_GeneralCompanyLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_GeneralCompanyLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for ControlParametersApi
    /// </summary>
    public class ControlParametersApiWebProxy : BaseProxy, IControlParametersApiWebProxy
    {
        public ControlParametersApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        public async Task<ControlParameterApiModel> Get()
        {
            var url = "api/ControlParametersApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<ControlParameterApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(ControlParameterApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<ControlParameterApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for DataImportDetailApi
    /// </summary>
    public class DataImportDetailApiWebProxy : BaseProxy, IDataImportDetailApiWebProxy
    {
        public DataImportDetailApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="importId"></param>
        public async Task<DataImportApiModel> Get(int? importId = null)
        {
            var url = "api/DataImportDetailApi"
            ;
            if (importId.HasValue){
                url = AppendQuery(url, "importId", importId.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<DataImportApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(DataImportApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<DataImportApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model"></param>
        public async Task<DataImportApiModel> Post(DataImportApiModel model)
        {
            var url = "api/DataImportDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<DataImportApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(DataImportApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<DataImportApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for DataImportListApi
    /// </summary>
    public class DataImportListApiWebProxy : BaseProxy, IDataImportListApiWebProxy
    {
        public DataImportListApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="options"></param>
        public async Task<GridResult_AdminImportHeaderLine> Post(GridRequestParametersApi options)
        {
            var url = "api/DataImportListApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, options).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_AdminImportHeaderLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_AdminImportHeaderLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_AdminImportHeaderLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for DatasheetDetailApi
    /// </summary>
    public class DatasheetDetailApiWebProxy : BaseProxy, IDatasheetDetailApiWebProxy
    {
        public DatasheetDetailApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="datasheetId"></param>
        /// <param name="datasheetTemplateId"></param>
        public async Task<DatasheetApiModel> Get(int? datasheetId = null, int? datasheetTemplateId = null)
        {
            var url = "api/DatasheetDetailApi"
            ;
            if (datasheetId.HasValue){
                url = AppendQuery(url, "datasheetId", datasheetId.ToString());
            }
            if (datasheetTemplateId.HasValue){
                url = AppendQuery(url, "datasheetTemplateId", datasheetTemplateId.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<DatasheetApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(DatasheetApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<DatasheetApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model"></param>
        public async Task<DatasheetApiModel> Post(DatasheetApiModel model)
        {
            var url = "api/DatasheetDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<DatasheetApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(DatasheetApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<DatasheetApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="key"></param>
        public async Task<DatasheetApiModel> Delete(DatasheetsDatasheetKey key)
        {
            var url = "api/DatasheetDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Delete",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<DatasheetApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(DatasheetApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<DatasheetApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for DatasheetListApi
    /// </summary>
    public class DatasheetListApiWebProxy : BaseProxy, IDatasheetListApiWebProxy
    {
        public DatasheetListApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="model"></param>
        public async Task<SaveResult> Put(DatasheetsDialogFields model)
        {
            var url = "api/DatasheetListApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Put",
                    Method = "PUT",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PutAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<SaveResult>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(SaveResult)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<SaveResult>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="options"></param>
        public async Task<GridResult_DatasheetsDatasheetModelLine> Post(GridRequestParametersApi options)
        {
            var url = "api/DatasheetListApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, options).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_DatasheetsDatasheetModelLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_DatasheetsDatasheetModelLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_DatasheetsDatasheetModelLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for DatasheetTemplateListApi
    /// </summary>
    public class DatasheetTemplateListApiWebProxy : BaseProxy, IDatasheetTemplateListApiWebProxy
    {
        public DatasheetTemplateListApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="options"></param>
        public async Task<GridResult_DatasheetsTemplateLine> Post(GridRequestParametersApi options)
        {
            var url = "api/DatasheetTemplateListApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, options).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_DatasheetsTemplateLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_DatasheetsTemplateLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_DatasheetsTemplateLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for GridManagementApi
    /// </summary>
    public class GridManagementApiWebProxy : BaseProxy, IGridManagementApiWebProxy
    {
        public GridManagementApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="layoutName"></param>
        public async Task<GridModel> Get(string layoutName = null)
        {
            var url = "api/GridManagementApi"
            ;
            if (layoutName != null){
                url = AppendQuery(url, "layoutName", layoutName.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model"></param>
        public async Task<GridModel> Post(GridModel model)
        {
            var url = "api/GridManagementApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="key"></param>
        public async Task<GridModel> Delete(Api_Controllers_GridApiKey key)
        {
            var url = "api/GridManagementApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Delete",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for JobBudgetDetailApi
    /// </summary>
    public class JobBudgetDetailApiWebProxy : BaseProxy, IJobBudgetDetailApiWebProxy
    {
        public JobBudgetDetailApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="jobCode"></param>
        /// <param name="estimateId"></param>
        /// <param name="estimateLineId"></param>
        /// <param name="bomQuantity"></param>
        /// <param name="isJournal"></param>
        public async Task<JobBudgetApiModel> Get(string jobCode = null, int? estimateId = null, int? estimateLineId = null, double? bomQuantity = null, bool? isJournal = null)
        {
            var url = "api/JobBudgetDetailApi"
            ;
            if (jobCode != null){
                url = AppendQuery(url, "jobCode", jobCode.ToString());
            }
            if (estimateId.HasValue){
                url = AppendQuery(url, "estimateId", estimateId.ToString());
            }
            if (estimateLineId.HasValue){
                url = AppendQuery(url, "estimateLineId", estimateLineId.ToString());
            }
            if (bomQuantity.HasValue){
                url = AppendQuery(url, "bomQuantity", bomQuantity.ToString());
            }
            if (isJournal != null){
                url = AppendQuery(url, "isJournal", isJournal.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<JobBudgetApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(JobBudgetApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<JobBudgetApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="changedModel"></param>
        public async Task<JobBudgetApiModel> Post(JobBudgetApiModel changedModel)
        {
            var url = "api/JobBudgetDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, changedModel).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<JobBudgetApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(JobBudgetApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<JobBudgetApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="key"></param>
        public async Task<JobBudgetApiModel> Delete(BudgetJobBudgetKey key)
        {
            var url = "api/JobBudgetDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Delete",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<JobBudgetApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(JobBudgetApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<JobBudgetApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for JobBudgetListApi
    /// </summary>
    public class JobBudgetListApiWebProxy : BaseProxy, IJobBudgetListApiWebProxy
    {
        public JobBudgetListApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="options"></param>
        public async Task<GridResult_BudgetJobBudgetLine> Post(GridRequestParametersApi options)
        {
            var url = "api/JobBudgetListApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, options).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_BudgetJobBudgetLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_BudgetJobBudgetLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_BudgetJobBudgetLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for JobDetailApi
    /// </summary>
    public class JobDetailApiWebProxy : BaseProxy, IJobDetailApiWebProxy
    {
        public JobDetailApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="jobCode"></param>
        public async Task<JobApiModel> Get(string jobCode = null)
        {
            var url = "api/JobDetailApi"
            ;
            if (jobCode != null){
                url = AppendQuery(url, "jobCode", jobCode.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<JobApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(JobApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<JobApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model"></param>
        public async Task<JobApiModel> Post(JobApiModel model)
        {
            var url = "api/JobDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<JobApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(JobApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<JobApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="key"></param>
        public async Task<JobApiModel> Delete(GeneralJobKey key)
        {
            var url = "api/JobDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Delete",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<JobApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(JobApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<JobApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for JobListApi
    /// </summary>
    public class JobListApiWebProxy : BaseProxy, IJobListApiWebProxy
    {
        public JobListApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="options"></param>
        public async Task<GridResult_GeneralJobLine> Post(GridRequestParametersApi options)
        {
            var url = "api/JobListApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, options).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_GeneralJobLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_GeneralJobLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_GeneralJobLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for JobMaintenanceApi
    /// </summary>
    public class JobMaintenanceApiWebProxy : BaseProxy, IJobMaintenanceApiWebProxy
    {
        public JobMaintenanceApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="jobCode"></param>
        public async Task<JobMaintenanceApiModel> Get(string jobCode = null)
        {
            var url = "api/JobMaintenanceApi"
            ;
            if (jobCode != null){
                url = AppendQuery(url, "jobCode", jobCode.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<JobMaintenanceApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(JobMaintenanceApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<JobMaintenanceApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model"></param>
        public async Task<JobMaintenanceApiModel> Post(JobMaintenanceApiModel model)
        {
            var url = "api/JobMaintenanceApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<JobMaintenanceApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(JobMaintenanceApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<JobMaintenanceApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="key"></param>
        public async Task<JobMaintenanceApiModel> Delete(JobsMaintenanceKey key)
        {
            var url = "api/JobMaintenanceApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Delete",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<JobMaintenanceApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(JobMaintenanceApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<JobMaintenanceApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for LogErrorApi
    /// </summary>
    public class LogErrorApiWebProxy : BaseProxy, ILogErrorApiWebProxy
    {
        public LogErrorApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="model"></param>
        public async Task<LogErrorApiModel> Post(LogErrorApiModel model)
        {
            var url = "api/LogErrorApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<LogErrorApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(LogErrorApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<LogErrorApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for LogHeaderApi
    /// </summary>
    public class LogHeaderApiWebProxy : BaseProxy, ILogHeaderApiWebProxy
    {
        public LogHeaderApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="logHeaderId"></param>
        public async Task<LogHeaderApiModel> Get(int? logHeaderId = null)
        {
            var url = "api/LogHeaderApi"
            ;
            if (logHeaderId.HasValue){
                url = AppendQuery(url, "logHeaderId", logHeaderId.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<LogHeaderApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(LogHeaderApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<LogHeaderApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model"></param>
        public async Task<LogHeaderApiModel> Post(LogHeaderApiModel model)
        {
            var url = "api/LogHeaderApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<LogHeaderApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(LogHeaderApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<LogHeaderApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="key"></param>
        public async Task<LogHeaderApiModel> Delete(TabletLogMaintenanceKey key)
        {
            var url = "api/LogHeaderApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Delete",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<LogHeaderApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(LogHeaderApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<LogHeaderApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for LogListApi
    /// </summary>
    public class LogListApiWebProxy : BaseProxy, ILogListApiWebProxy
    {
        public LogListApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="options"></param>
        public async Task<GridResult_ServiceDeskLine> Post(GridRequestParametersApi options)
        {
            var url = "api/LogListApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, options).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_ServiceDeskLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_ServiceDeskLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_ServiceDeskLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for LogMaintenanceApi
    /// </summary>
    public class LogMaintenanceApiWebProxy : BaseProxy, ILogMaintenanceApiWebProxy
    {
        public LogMaintenanceApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="logHeaderId"></param>
        public async Task<LogApiModel> Get(int? logHeaderId = null)
        {
            var url = "api/LogMaintenanceApi"
            ;
            if (logHeaderId.HasValue){
                url = AppendQuery(url, "logHeaderId", logHeaderId.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<LogApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(LogApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<LogApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model"></param>
        public async Task<LogApiModel> Put(LogApiModel model)
        {
            var url = "api/LogMaintenanceApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Put",
                    Method = "PUT",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PutAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<LogApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(LogApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<LogApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model"></param>
        public async Task<LogApiModel> Post(LogApiModel model)
        {
            var url = "api/LogMaintenanceApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<LogApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(LogApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<LogApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="key"></param>
        public async Task<LogApiModel> Delete(TabletLogMaintenanceKey key)
        {
            var url = "api/LogMaintenanceApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Delete",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<LogApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(LogApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<LogApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for LogServiceAgreementApi
    /// </summary>
    public class LogServiceAgreementApiWebProxy : BaseProxy, ILogServiceAgreementApiWebProxy
    {
        public LogServiceAgreementApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="serviceAgreementID"></param>
        /// <param name="serviceAgreementCode"></param>
        /// <param name="orderNo"></param>
        public async Task<LogServiceAgreementApiKey> Put(int? serviceAgreementID = null, string serviceAgreementCode = null, string orderNo = null)
        {
            var url = "api/LogServiceAgreementApi"
            ;
            if (serviceAgreementID.HasValue){
                url = AppendQuery(url, "serviceAgreementID", serviceAgreementID.ToString());
            }
            if (serviceAgreementCode != null){
                url = AppendQuery(url, "serviceAgreementCode", serviceAgreementCode.ToString());
            }
            if (orderNo != null){
                url = AppendQuery(url, "orderNo", orderNo.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Put",
                    Method = "PUT",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PutAsync(url, new StringContent(string.Empty)).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<LogServiceAgreementApiKey>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(LogServiceAgreementApiKey)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<LogServiceAgreementApiKey>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for PeopleDetailApi
    /// </summary>
    public class PeopleDetailApiWebProxy : BaseProxy, IPeopleDetailApiWebProxy
    {
        public PeopleDetailApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="personId"></param>
        public async Task<PeopleApiModel> Get(int? personId = null)
        {
            var url = "api/PeopleDetailApi"
            ;
            if (personId.HasValue){
                url = AppendQuery(url, "personId", personId.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<PeopleApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(PeopleApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<PeopleApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model"></param>
        public async Task<PeopleApiModel> Post(PeopleApiModel model)
        {
            var url = "api/PeopleDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<PeopleApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(PeopleApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<PeopleApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="personId"></param>
        public async Task<PeopleApiModel> Delete(int? personId = null)
        {
            var url = "api/PeopleDetailApi"
            ;
            if (personId.HasValue){
                url = AppendQuery(url, "personId", personId.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Delete",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<PeopleApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(PeopleApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<PeopleApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for PeopleListApi
    /// </summary>
    public class PeopleListApiWebProxy : BaseProxy, IPeopleListApiWebProxy
    {
        public PeopleListApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="options"></param>
        public async Task<GridResult_GeneralPersonLine> Post(GridRequestParametersApi options)
        {
            var url = "api/PeopleListApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, options).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_GeneralPersonLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_GeneralPersonLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_GeneralPersonLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for PlantListApi
    /// </summary>
    public class PlantListApiWebProxy : BaseProxy, IPlantListApiWebProxy
    {
        public PlantListApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="options"></param>
        public async Task<GridResult_PlantPlantItemLine> Post(GridRequestParametersApi options)
        {
            var url = "api/PlantListApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, options).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_PlantPlantItemLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_PlantPlantItemLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_PlantPlantItemLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for PlantLookupApi
    /// </summary>
    public class PlantLookupApiWebProxy : BaseProxy, IPlantLookupApiWebProxy
    {
        public PlantLookupApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="options"></param>
        public async Task<GridResult_LookupsPlantLineModel> Post(GridRequestParametersApi options)
        {
            var url = "api/PlantLookupApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, options).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_LookupsPlantLineModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_LookupsPlantLineModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_LookupsPlantLineModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for PurchaseOrderDefaultsApi
    /// </summary>
    public class PurchaseOrderDefaultsApiWebProxy : BaseProxy, IPurchaseOrderDefaultsApiWebProxy
    {
        public PurchaseOrderDefaultsApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="purchaseOrderLineId"></param>
        /// <param name="purchaserId"></param>
        /// <param name="finCoCode"></param>
        /// <param name="jobCode"></param>
        /// <param name="lineCode"></param>
        /// <param name="activityCode"></param>
        /// <param name="workCentreCode"></param>
        /// <param name="gstTypeCode"></param>
        public async Task<PurchaseOrdersDetailLine> Get(int? purchaseOrderLineId = null, int? purchaserId = null, string finCoCode = null, string jobCode = null, int? lineCode = null, string activityCode = null, string workCentreCode = null, string gstTypeCode = null)
        {
            var url = "api/PurchaseOrderDefaultsApi"
            ;
            if (purchaseOrderLineId.HasValue){
                url = AppendQuery(url, "purchaseOrderLineId", purchaseOrderLineId.ToString());
            }
            if (purchaserId.HasValue){
                url = AppendQuery(url, "purchaserId", purchaserId.ToString());
            }
            if (finCoCode != null){
                url = AppendQuery(url, "finCoCode", finCoCode.ToString());
            }
            if (jobCode != null){
                url = AppendQuery(url, "jobCode", jobCode.ToString());
            }
            if (lineCode.HasValue){
                url = AppendQuery(url, "lineCode", lineCode.ToString());
            }
            if (activityCode != null){
                url = AppendQuery(url, "activityCode", activityCode.ToString());
            }
            if (workCentreCode != null){
                url = AppendQuery(url, "workCentreCode", workCentreCode.ToString());
            }
            if (gstTypeCode != null){
                url = AppendQuery(url, "gstTypeCode", gstTypeCode.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<PurchaseOrdersDetailLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(PurchaseOrdersDetailLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<PurchaseOrdersDetailLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for PurchaseOrderDetailApi
    /// </summary>
    public class PurchaseOrderDetailApiWebProxy : BaseProxy, IPurchaseOrderDetailApiWebProxy
    {
        public PurchaseOrderDetailApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="pONumber"></param>
        public async Task<PurchaseOrderApiModel> Get(int? pONumber = null)
        {
            var url = "api/PurchaseOrderDetailApi"
            ;
            if (pONumber.HasValue){
                url = AppendQuery(url, "pONumber", pONumber.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<PurchaseOrderApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(PurchaseOrderApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<PurchaseOrderApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model"></param>
        public async Task<PurchaseOrderApiModel> Put(PurchaseOrderApiModel model)
        {
            var url = "api/PurchaseOrderDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Put",
                    Method = "PUT",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PutAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<PurchaseOrderApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(PurchaseOrderApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<PurchaseOrderApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model"></param>
        public async Task<PurchaseOrderApiModel> Post(PurchaseOrderApiModel model)
        {
            var url = "api/PurchaseOrderDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<PurchaseOrderApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(PurchaseOrderApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<PurchaseOrderApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="key"></param>
        public async Task<PurchaseOrderApiModel> Delete(PurchaseOrdersKey key)
        {
            var url = "api/PurchaseOrderDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Delete",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<PurchaseOrderApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(PurchaseOrderApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<PurchaseOrderApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for PurchaseOrderListApi
    /// </summary>
    public class PurchaseOrderListApiWebProxy : BaseProxy, IPurchaseOrderListApiWebProxy
    {
        public PurchaseOrderListApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="options"></param>
        public async Task<GridResult_PurchaseOrdersListItem> Post(GridRequestParametersApi options)
        {
            var url = "api/PurchaseOrderListApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, options).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_PurchaseOrdersListItem>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_PurchaseOrdersListItem)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_PurchaseOrdersListItem>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for QuoteDetailApi
    /// </summary>
    public class QuoteDetailApiWebProxy : BaseProxy, IQuoteDetailApiWebProxy
    {
        public QuoteDetailApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="quoteID"></param>
        /// <param name="quoteNo"></param>
        /// <param name="currencyCode"></param>
        /// <param name="clientId"></param>
        /// <param name="isNew"></param>
        public async Task<QuoteApiModel> Get(int? quoteID = null, string quoteNo = null, string currencyCode = null, int? clientId = null, bool? isNew = null)
        {
            var url = "api/QuoteDetailApi"
            ;
            if (quoteID.HasValue){
                url = AppendQuery(url, "quoteID", quoteID.ToString());
            }
            if (quoteNo != null){
                url = AppendQuery(url, "quoteNo", quoteNo.ToString());
            }
            if (currencyCode != null){
                url = AppendQuery(url, "currencyCode", currencyCode.ToString());
            }
            if (clientId.HasValue){
                url = AppendQuery(url, "clientId", clientId.ToString());
            }
            if (isNew != null){
                url = AppendQuery(url, "isNew", isNew.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<QuoteApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(QuoteApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<QuoteApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="changedModel"></param>
        public async Task<QuoteApiModel> Post(QuoteApiModel changedModel)
        {
            var url = "api/QuoteDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, changedModel).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<QuoteApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(QuoteApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<QuoteApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="key"></param>
        public async Task<QuoteApiModel> Delete(QuotesQuoteKey key)
        {
            var url = "api/QuoteDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Delete",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<QuoteApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(QuoteApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<QuoteApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for QuoteLineLabourSellingRate
    /// </summary>
    public class QuoteLineLabourSellingRateWebProxy : BaseProxy, IQuoteLineLabourSellingRateWebProxy
    {
        public QuoteLineLabourSellingRateWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="priceCode"></param>
        /// <param name="activityCode"></param>
        /// <param name="employeeClassCode"></param>
        /// <param name="personId"></param>
        public async Task<QuoteLineSellingRateModel> Get(string priceCode = null, string activityCode = null, string employeeClassCode = null, int? personId = null)
        {
            var url = "api/QuoteLineLabourSellingRate"
            ;
            if (priceCode != null){
                url = AppendQuery(url, "priceCode", priceCode.ToString());
            }
            if (activityCode != null){
                url = AppendQuery(url, "activityCode", activityCode.ToString());
            }
            if (employeeClassCode != null){
                url = AppendQuery(url, "employeeClassCode", employeeClassCode.ToString());
            }
            if (personId.HasValue){
                url = AppendQuery(url, "personId", personId.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<QuoteLineSellingRateModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(QuoteLineSellingRateModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<QuoteLineSellingRateModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for QuoteLineMaterialSellingRate
    /// </summary>
    public class QuoteLineMaterialSellingRateWebProxy : BaseProxy, IQuoteLineMaterialSellingRateWebProxy
    {
        public QuoteLineMaterialSellingRateWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="priceCode"></param>
        /// <param name="lineType"></param>
        /// <param name="itemId"></param>
        /// <param name="catalogueLineId"></param>
        /// <param name="activityCode"></param>
        /// <param name="rateCode"></param>
        public async Task<QuoteLineSellingRateModel> Get(string priceCode = null, string lineType = null, int? itemId = null, int? catalogueLineId = null, string activityCode = null, string rateCode = null)
        {
            var url = "api/QuoteLineMaterialSellingRate"
            ;
            if (priceCode != null){
                url = AppendQuery(url, "priceCode", priceCode.ToString());
            }
            if (lineType != null){
                url = AppendQuery(url, "lineType", lineType.ToString());
            }
            if (itemId.HasValue){
                url = AppendQuery(url, "itemId", itemId.ToString());
            }
            if (catalogueLineId.HasValue){
                url = AppendQuery(url, "catalogueLineId", catalogueLineId.ToString());
            }
            if (activityCode != null){
                url = AppendQuery(url, "activityCode", activityCode.ToString());
            }
            if (rateCode != null){
                url = AppendQuery(url, "rateCode", rateCode.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<QuoteLineSellingRateModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(QuoteLineSellingRateModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<QuoteLineSellingRateModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for QuoteLinePlantSellingRate
    /// </summary>
    public class QuoteLinePlantSellingRateWebProxy : BaseProxy, IQuoteLinePlantSellingRateWebProxy
    {
        public QuoteLinePlantSellingRateWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="priceCode"></param>
        /// <param name="itemId"></param>
        /// <param name="activityCode"></param>
        /// <param name="rateCode"></param>
        public async Task<QuoteLineSellingRateModel> Get(string priceCode = null, int? itemId = null, string activityCode = null, string rateCode = null)
        {
            var url = "api/QuoteLinePlantSellingRate"
            ;
            if (priceCode != null){
                url = AppendQuery(url, "priceCode", priceCode.ToString());
            }
            if (itemId.HasValue){
                url = AppendQuery(url, "itemId", itemId.ToString());
            }
            if (activityCode != null){
                url = AppendQuery(url, "activityCode", activityCode.ToString());
            }
            if (rateCode != null){
                url = AppendQuery(url, "rateCode", rateCode.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<QuoteLineSellingRateModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(QuoteLineSellingRateModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<QuoteLineSellingRateModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for QuoteListApi
    /// </summary>
    public class QuoteListApiWebProxy : BaseProxy, IQuoteListApiWebProxy
    {
        public QuoteListApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="options"></param>
        public async Task<GridResult_QuotesListLine> Post(GridRequestParametersApi options)
        {
            var url = "api/QuoteListApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, options).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_QuotesListLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_QuotesListLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_QuotesListLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for ScaffoldDetailApi
    /// </summary>
    public class ScaffoldDetailApiWebProxy : BaseProxy, IScaffoldDetailApiWebProxy
    {
        public ScaffoldDetailApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="stringId"></param>
        /// <param name="intId"></param>
        /// <param name="dateId"></param>
        /// <param name="stringId1"></param>
        /// <param name="intId1"></param>
        /// <param name="dateId1"></param>
        /// <param name="name"></param>
        /// <param name="keyName"></param>
        /// <param name="keyName1"></param>
        /// <param name="sortDesc"></param>
        public async Task<ScaffoldTableDataLine> Get(string stringId = null, int? intId = null, DateTime? dateId = null, string stringId1 = null, int? intId1 = null, DateTime? dateId1 = null, string name = null, string keyName = null, string keyName1 = null, bool? sortDesc = null)
        {
            var url = "api/ScaffoldDetailApi"
            ;
            if (stringId != null){
                url = AppendQuery(url, "stringId", stringId.ToString());
            }
            if (intId.HasValue){
                url = AppendQuery(url, "intId", intId.ToString());
            }
            if (dateId != null){
                url = AppendQuery(url, "dateId", dateId.ToString());
            }
            if (stringId1 != null){
                url = AppendQuery(url, "stringId1", stringId1.ToString());
            }
            if (intId1.HasValue){
                url = AppendQuery(url, "intId1", intId1.ToString());
            }
            if (dateId1 != null){
                url = AppendQuery(url, "dateId1", dateId1.ToString());
            }
            if (name != null){
                url = AppendQuery(url, "name", name.ToString());
            }
            if (keyName != null){
                url = AppendQuery(url, "keyName", keyName.ToString());
            }
            if (keyName1 != null){
                url = AppendQuery(url, "keyName1", keyName1.ToString());
            }
            if (sortDesc != null){
                url = AppendQuery(url, "sortDesc", sortDesc.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<ScaffoldTableDataLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(ScaffoldTableDataLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<ScaffoldTableDataLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model"></param>
        public async Task<ScaffoldTableDataLine> Put(ScaffoldTableDataLine model)
        {
            var url = "api/ScaffoldDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Put",
                    Method = "PUT",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PutAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<ScaffoldTableDataLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(ScaffoldTableDataLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<ScaffoldTableDataLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model"></param>
        public async Task<ScaffoldTableDataLine> Post(ScaffoldTableDataLine model)
        {
            var url = "api/ScaffoldDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<ScaffoldTableDataLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(ScaffoldTableDataLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<ScaffoldTableDataLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="key"></param>
        public async Task<ScaffoldTableDataLine> Delete(ScaffoldTableDataKey key)
        {
            var url = "api/ScaffoldDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Delete",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<ScaffoldTableDataLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(ScaffoldTableDataLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<ScaffoldTableDataLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for ScaffoldListApi
    /// </summary>
    public class ScaffoldListApiWebProxy : BaseProxy, IScaffoldListApiWebProxy
    {
        public ScaffoldListApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="options"></param>
        public async Task<GridResult_ScaffoldTableDataLine> Post(GridRequestParametersApi options)
        {
            var url = "api/ScaffoldListApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, options).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_ScaffoldTableDataLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_ScaffoldTableDataLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_ScaffoldTableDataLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for ScaffoldLiteApi
    /// </summary>
    public class ScaffoldLiteApiWebProxy : BaseProxy, IScaffoldLiteApiWebProxy
    {
        public ScaffoldLiteApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="stringId"></param>
        /// <param name="intId"></param>
        /// <param name="dateId"></param>
        /// <param name="stringId1"></param>
        /// <param name="intId1"></param>
        /// <param name="dateId1"></param>
        /// <param name="name"></param>
        /// <param name="keyName"></param>
        /// <param name="keyName1"></param>
        /// <param name="sortDesc"></param>
        public async Task<ScaffoldTableDataLite> Get(string stringId = null, int? intId = null, DateTime? dateId = null, string stringId1 = null, int? intId1 = null, DateTime? dateId1 = null, string name = null, string keyName = null, string keyName1 = null, bool? sortDesc = null)
        {
            var url = "api/ScaffoldLiteApi"
            ;
            if (stringId != null){
                url = AppendQuery(url, "stringId", stringId.ToString());
            }
            if (intId.HasValue){
                url = AppendQuery(url, "intId", intId.ToString());
            }
            if (dateId != null){
                url = AppendQuery(url, "dateId", dateId.ToString());
            }
            if (stringId1 != null){
                url = AppendQuery(url, "stringId1", stringId1.ToString());
            }
            if (intId1.HasValue){
                url = AppendQuery(url, "intId1", intId1.ToString());
            }
            if (dateId1 != null){
                url = AppendQuery(url, "dateId1", dateId1.ToString());
            }
            if (name != null){
                url = AppendQuery(url, "name", name.ToString());
            }
            if (keyName != null){
                url = AppendQuery(url, "keyName", keyName.ToString());
            }
            if (keyName1 != null){
                url = AppendQuery(url, "keyName1", keyName1.ToString());
            }
            if (sortDesc != null){
                url = AppendQuery(url, "sortDesc", sortDesc.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<ScaffoldTableDataLite>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(ScaffoldTableDataLite)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<ScaffoldTableDataLite>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model"></param>
        public async Task<ScaffoldTableDataLite> Put(ScaffoldTableDataLite model)
        {
            var url = "api/ScaffoldLiteApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Put",
                    Method = "PUT",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PutAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<ScaffoldTableDataLite>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(ScaffoldTableDataLite)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<ScaffoldTableDataLite>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model"></param>
        public async Task<ScaffoldTableDataLite> Post(ScaffoldTableDataLite model)
        {
            var url = "api/ScaffoldLiteApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<ScaffoldTableDataLite>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(ScaffoldTableDataLite)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<ScaffoldTableDataLite>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="key"></param>
        public async Task<ScaffoldTableDataLite> Delete(ScaffoldTableDataKey key)
        {
            var url = "api/ScaffoldLiteApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Delete",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<ScaffoldTableDataLite>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(ScaffoldTableDataLite)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<ScaffoldTableDataLite>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for SiteMapApi
    /// </summary>
    public class SiteMapApiWebProxy : BaseProxy, ISiteMapApiWebProxy
    {
        public SiteMapApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        public async Task<SiteMapProfileApiModel> Get()
        {
            var url = "api/SiteMapApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<SiteMapProfileApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(SiteMapProfileApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<SiteMapProfileApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for StoredFilesApi
    /// </summary>
    public class StoredFilesApiWebProxy : BaseProxy, IStoredFilesApiWebProxy
    {
        public StoredFilesApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="storedFileId"></param>
        public async Task<StoredFilesApiModel> Get(int? storedFileId = null)
        {
            var url = "api/StoredFilesApi"
            ;
            if (storedFileId.HasValue){
                url = AppendQuery(url, "storedFileId", storedFileId.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<StoredFilesApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(StoredFilesApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<StoredFilesApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model"></param>
        public async Task<StoredFilesApiModel> Post(Web_Lib_FileUpload_StoredFilesApiModel model)
        {
            var url = "api/StoredFilesApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<StoredFilesApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(StoredFilesApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<StoredFilesApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="storedFileId"></param>
        public async Task<StoredFilesApiModel> Delete(int? storedFileId = null)
        {
            var url = "api/StoredFilesApi"
            ;
            if (storedFileId.HasValue){
                url = AppendQuery(url, "storedFileId", storedFileId.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Delete",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<StoredFilesApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(StoredFilesApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<StoredFilesApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for StoredFilesContentApi
    /// </summary>
    public class StoredFilesContentApiWebProxy : BaseProxy, IStoredFilesContentApiWebProxy
    {
        public StoredFilesContentApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="storedFileId"></param>
        public async Task<object> Get(int? storedFileId = null)
        {
            var url = "api/StoredFilesContentApi"
            ;
            if (storedFileId.HasValue){
                url = AppendQuery(url, "storedFileId", storedFileId.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<object>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(object)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<object>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for SubContractClaimApprovalApi
    /// </summary>
    public class SubContractClaimApprovalApiWebProxy : BaseProxy, ISubContractClaimApprovalApiWebProxy
    {
        public SubContractClaimApprovalApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="key"></param>
        public async Task<SubContractsSubContractClaimSaveResult> Post(SubContractClaimApiKey key)
        {
            var url = "api/SubContractClaimApprovalApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, key).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<SubContractsSubContractClaimSaveResult>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(SubContractsSubContractClaimSaveResult)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<SubContractsSubContractClaimSaveResult>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for SubContractClaimDetailApi
    /// </summary>
    public class SubContractClaimDetailApiWebProxy : BaseProxy, ISubContractClaimDetailApiWebProxy
    {
        public SubContractClaimDetailApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="subContractCode"></param>
        /// <param name="aPInvoiceID"></param>
        /// <param name="jobCode"></param>
        /// <param name="subContractCompID"></param>
        public async Task<SubContractClaimApiModel> Get(string subContractCode = null, int? aPInvoiceID = null, string jobCode = null, int? subContractCompID = null)
        {
            var url = "api/SubContractClaimDetailApi"
            ;
            if (subContractCode != null){
                url = AppendQuery(url, "subContractCode", subContractCode.ToString());
            }
            if (aPInvoiceID.HasValue){
                url = AppendQuery(url, "aPInvoiceID", aPInvoiceID.ToString());
            }
            if (jobCode != null){
                url = AppendQuery(url, "jobCode", jobCode.ToString());
            }
            if (subContractCompID.HasValue){
                url = AppendQuery(url, "subContractCompID", subContractCompID.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<SubContractClaimApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(SubContractClaimApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<SubContractClaimApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model"></param>
        public async Task<SubContractClaimApiModel> Post(SubContractClaimApiModel model)
        {
            var url = "api/SubContractClaimDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<SubContractClaimApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(SubContractClaimApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<SubContractClaimApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="subContractCode"></param>
        /// <param name="aPInvoiceID"></param>
        /// <param name="jobCode"></param>
        /// <param name="subContractCompID"></param>
        public async Task<SubContractClaimApiModel> Delete(string subContractCode = null, int? aPInvoiceID = null, string jobCode = null, int? subContractCompID = null)
        {
            var url = "api/SubContractClaimDetailApi"
            ;
            if (subContractCode != null){
                url = AppendQuery(url, "subContractCode", subContractCode.ToString());
            }
            if (aPInvoiceID.HasValue){
                url = AppendQuery(url, "aPInvoiceID", aPInvoiceID.ToString());
            }
            if (jobCode != null){
                url = AppendQuery(url, "jobCode", jobCode.ToString());
            }
            if (subContractCompID.HasValue){
                url = AppendQuery(url, "subContractCompID", subContractCompID.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Delete",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<SubContractClaimApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(SubContractClaimApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<SubContractClaimApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for SubContractClaimEntryApi
    /// </summary>
    public class SubContractClaimEntryApiWebProxy : BaseProxy, ISubContractClaimEntryApiWebProxy
    {
        public SubContractClaimEntryApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="subContractCode"></param>
        /// <param name="apInvoiceId"></param>
        public async Task<SubContractClaimEntryApiModel> Get(string subContractCode = null, int? apInvoiceId = null)
        {
            var url = "api/SubContractClaimEntryApi"
            ;
            if (subContractCode != null){
                url = AppendQuery(url, "subContractCode", subContractCode.ToString());
            }
            if (apInvoiceId.HasValue){
                url = AppendQuery(url, "apInvoiceId", apInvoiceId.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<SubContractClaimEntryApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(SubContractClaimEntryApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<SubContractClaimEntryApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model"></param>
        public async Task<SubContractClaimEntryApiModel> Post(SubContractClaimEntryApiModel model)
        {
            var url = "api/SubContractClaimEntryApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<SubContractClaimEntryApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(SubContractClaimEntryApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<SubContractClaimEntryApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="subContractCode"></param>
        /// <param name="apInvoiceId"></param>
        /// <param name="dialogId"></param>
        /// <param name="gridId"></param>
        public async Task<SubContractClaimEntryApiModel> Delete(string subContractCode = null, int? apInvoiceId = null, string dialogId = null, string gridId = null)
        {
            var url = "api/SubContractClaimEntryApi"
            ;
            if (subContractCode != null){
                url = AppendQuery(url, "subContractCode", subContractCode.ToString());
            }
            if (apInvoiceId.HasValue){
                url = AppendQuery(url, "apInvoiceId", apInvoiceId.ToString());
            }
            if (dialogId != null){
                url = AppendQuery(url, "dialogId", dialogId.ToString());
            }
            if (gridId != null){
                url = AppendQuery(url, "gridId", gridId.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Delete",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<SubContractClaimEntryApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(SubContractClaimEntryApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<SubContractClaimEntryApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for SubContractClaimListApi
    /// </summary>
    public class SubContractClaimListApiWebProxy : BaseProxy, ISubContractClaimListApiWebProxy
    {
        public SubContractClaimListApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="options"></param>
        public async Task<GridResult_SubContractsSubContractClaimLine> Post(GridRequestParametersApi options)
        {
            var url = "api/SubContractClaimListApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, options).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_SubContractsSubContractClaimLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_SubContractsSubContractClaimLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_SubContractsSubContractClaimLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for SubContractClaimUnapprovalApi
    /// </summary>
    public class SubContractClaimUnapprovalApiWebProxy : BaseProxy, ISubContractClaimUnapprovalApiWebProxy
    {
        public SubContractClaimUnapprovalApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="key"></param>
        public async Task<SubContractsSubContractClaimSaveResult> Post(SubContractClaimApiKey key)
        {
            var url = "api/SubContractClaimUnapprovalApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, key).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<SubContractsSubContractClaimSaveResult>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(SubContractsSubContractClaimSaveResult)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<SubContractsSubContractClaimSaveResult>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for SubContractListApi
    /// </summary>
    public class SubContractListApiWebProxy : BaseProxy, ISubContractListApiWebProxy
    {
        public SubContractListApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="options"></param>
        public async Task<GridResult_SubContractsSubContractLine> Post(GridRequestParametersApi options)
        {
            var url = "api/SubContractListApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, options).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_SubContractsSubContractLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_SubContractsSubContractLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_SubContractsSubContractLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for TableApi
    /// </summary>
    public class TableApiWebProxy : BaseProxy, ITableApiWebProxy
    {
        public TableApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="options"></param>
        public async Task<GridResult_TableApiResponse> Post(TableApiRequest options)
        {
            var url = "api/TableApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, options).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_TableApiResponse>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_TableApiResponse)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_TableApiResponse>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for TableRowApi
    /// </summary>
    public class TableRowApiWebProxy : BaseProxy, ITableRowApiWebProxy
    {
        public TableRowApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="tableName"></param>
        /// <param name="keyName"></param>
        /// <param name="keyValue"></param>
        /// <param name="columnNames"></param>
        public async Task<TableApiResponse> Get(string tableName = null, string keyName = null, string keyValue = null, string columnNames = null)
        {
            var url = "api/TableRowApi"
            ;
            if (tableName != null){
                url = AppendQuery(url, "tableName", tableName.ToString());
            }
            if (keyName != null){
                url = AppendQuery(url, "keyName", keyName.ToString());
            }
            if (keyValue != null){
                url = AppendQuery(url, "keyValue", keyValue.ToString());
            }
            if (columnNames != null){
                url = AppendQuery(url, "columnNames", columnNames.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<TableApiResponse>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(TableApiResponse)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<TableApiResponse>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model"></param>
        public async Task<TableApiResponse> Put(TableApiLine model)
        {
            var url = "api/TableRowApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Put",
                    Method = "PUT",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PutAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<TableApiResponse>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(TableApiResponse)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<TableApiResponse>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model"></param>
        public async Task<TableApiResponse> Post(TableApiLine model)
        {
            var url = "api/TableRowApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<TableApiResponse>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(TableApiResponse)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<TableApiResponse>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="key"></param>
        public async Task<TableApiResponse> Delete(TableApiKey key)
        {
            var url = "api/TableRowApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Delete",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<TableApiResponse>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(TableApiResponse)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<TableApiResponse>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for TimesheetAttendanceApi
    /// </summary>
    public class TimesheetAttendanceApiWebProxy : BaseProxy, ITimesheetAttendanceApiWebProxy
    {
        public TimesheetAttendanceApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="options"></param>
        public async Task<GridResult_TimesheetsAttendanceLine> Post(GridRequestParametersApi options)
        {
            var url = "api/TimesheetAttendanceApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, options).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_TimesheetsAttendanceLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_TimesheetsAttendanceLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_TimesheetsAttendanceLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for TimesheetDefaultsApi
    /// </summary>
    public class TimesheetDefaultsApiWebProxy : BaseProxy, ITimesheetDefaultsApiWebProxy
    {
        public TimesheetDefaultsApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="jobTranId"></param>
        /// <param name="personId"></param>
        /// <param name="finCoCode"></param>
        /// <param name="jobCode"></param>
        /// <param name="activityCode"></param>
        /// <param name="workCentreCode"></param>
        /// <param name="activityType"></param>
        /// <param name="activitySubType"></param>
        /// <param name="timeCode"></param>
        /// <param name="costType"></param>
        /// <param name="costRate"></param>
        /// <param name="gstRate"></param>
        /// <param name="statusFlag"></param>
        /// <param name="tranDate"></param>
        /// <param name="employeeClass"></param>
        public async Task<TimesheetsDetailDefaults> Get(int? jobTranId = null, int? personId = null, string finCoCode = null, string jobCode = null, string activityCode = null, string workCentreCode = null, string activityType = null, string activitySubType = null, string timeCode = null, string costType = null, double? costRate = null, double? gstRate = null, int? statusFlag = null, DateTime? tranDate = null, string employeeClass = null)
        {
            var url = "api/TimesheetDefaultsApi"
            ;
            if (jobTranId.HasValue){
                url = AppendQuery(url, "jobTranId", jobTranId.ToString());
            }
            if (personId.HasValue){
                url = AppendQuery(url, "personId", personId.ToString());
            }
            if (finCoCode != null){
                url = AppendQuery(url, "finCoCode", finCoCode.ToString());
            }
            if (jobCode != null){
                url = AppendQuery(url, "jobCode", jobCode.ToString());
            }
            if (activityCode != null){
                url = AppendQuery(url, "activityCode", activityCode.ToString());
            }
            if (workCentreCode != null){
                url = AppendQuery(url, "workCentreCode", workCentreCode.ToString());
            }
            if (activityType != null){
                url = AppendQuery(url, "activityType", activityType.ToString());
            }
            if (activitySubType != null){
                url = AppendQuery(url, "activitySubType", activitySubType.ToString());
            }
            if (timeCode != null){
                url = AppendQuery(url, "timeCode", timeCode.ToString());
            }
            if (costType != null){
                url = AppendQuery(url, "costType", costType.ToString());
            }
            if (costRate.HasValue){
                url = AppendQuery(url, "costRate", costRate.ToString());
            }
            if (gstRate.HasValue){
                url = AppendQuery(url, "gstRate", gstRate.ToString());
            }
            if (statusFlag.HasValue){
                url = AppendQuery(url, "statusFlag", statusFlag.ToString());
            }
            if (tranDate != null){
                url = AppendQuery(url, "tranDate", tranDate.ToString());
            }
            if (employeeClass != null){
                url = AppendQuery(url, "employeeClass", employeeClass.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<TimesheetsDetailDefaults>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(TimesheetsDetailDefaults)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<TimesheetsDetailDefaults>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for TimesheetDetailApi
    /// </summary>
    public class TimesheetDetailApiWebProxy : BaseProxy, ITimesheetDetailApiWebProxy
    {
        public TimesheetDetailApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="personId"></param>
        /// <param name="timesheetDate"></param>
        /// <param name="functionalCode"></param>
        public async Task<TimesheetApiModel> Get(int? personId = null, DateTime? timesheetDate = null, GetfunctionalCode functionalCode = GetfunctionalCode.General)
        {
            var url = "api/TimesheetDetailApi"
            ;
            if (personId.HasValue){
                url = AppendQuery(url, "personId", personId.ToString());
            }
            if (timesheetDate != null){
                url = AppendQuery(url, "timesheetDate", timesheetDate.ToString());
            }
            url = AppendQuery(url, "functionalCode", functionalCode.ToString());

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<TimesheetApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(TimesheetApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<TimesheetApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="model">Timesheet and Timesheet lines. See Application UI calls for details.</param>
        public async Task<TimesheetApiModel> Post(TimesheetApiModel model)
        {
            var url = "api/TimesheetDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, model).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<TimesheetApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(TimesheetApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<TimesheetApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="key"></param>
        public async Task<TimesheetApiModel> Delete(TimesheetApiKey key)
        {
            var url = "api/TimesheetDetailApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Delete",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<TimesheetApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(TimesheetApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<TimesheetApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        public enum GetfunctionalCode
        {
            General,
            PurchaseOrders,
            PurchaseOrderApproval,
            PurchaseRequisitions,
            Timesheets,
            TimesheetReviews,
            TimesheetApproval,
            TimesheetApprovalList,
            ServiceLog,
            ServiceDesk,
            ExpenseClaims,
            ExpenseClaimReviews,
            ExpenseClaimApproval,
            ExpenseClaimAdminApproval,
            TabletTimesheet,
            TabletTimePlant,
            Scheduler,
            LeaveManagement,
            LeaveTypeManagement,
            CrewTimesheets,
            Refueling,
            HumanResources,
            DailyDiary,
            Datasheets,
            CreditCards,
            Stock,
            LogDaysheet,
            PortalPeople,
            PortalCompany,
            Workflow,
            Reporting,
            ProfitCentres,
            ExternalSalesCodes,
            InternalSalesCodes,
            ActivityReportCode,
            ProfitCentreReportCode,
            SalesCodeReportCode,
            Batch,
            Budget,
            Billing,
            TimeCodes,
            Disbursement,
            Jobs,
            ApInvoices,
            Adjustments,
            Plant,
            NonStockLocation,
            JobContract,
            Processes,
            JobReceipt,
            Forecast,
            SubContracts,
            WorkOrderApproval,
            StockItem,
            ApInvoiceApproval,
            ApCreditApproval,
            TimesheetAdminApproval,
            DocketEntry,
            Revenue,
            Vouchers,
            VoucherApproval,
            Quotes,
            ProductionMeasures,
            StockIssue,
            Utilities,
            SubcontractClaimWorkflowApproval,
            BulkInvoice,
            WorkOrder,
            Activities,
            SalesCodes,
            ContractorDaysheet,
        }

    }

    /// <summary>
    /// Web Proxy for TimesheetListApi
    /// </summary>
    public class TimesheetListApiWebProxy : BaseProxy, ITimesheetListApiWebProxy
    {
        public TimesheetListApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="options"></param>
        public async Task<GridResult_TimesheetsListItem> Post(GridRequestParametersApi options)
        {
            var url = "api/TimesheetListApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, options).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_TimesheetsListItem>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_TimesheetsListItem)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_TimesheetsListItem>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for UploadFileApi
    /// </summary>
    public class UploadFileApiWebProxy : BaseProxy, IUploadFileApiWebProxy
    {
        public UploadFileApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="file"></param>
        /// <param name="fileName"></param>
        /// <param name="relatedRecordId"></param>
        /// <param name="relatedRecordType"></param>
        public async Task<UploadedFileApiModel> UploadImage(Tuple<string, byte[]> file, string relatedRecordId, string relatedRecordType, string fileName = null)
        {
            var url = "api/UploadFileApi"
            ;
            if (fileName != null){
                url = AppendQuery(url, "fileName", fileName.ToString());
            }
            url = AppendQuery(url, "relatedRecordId", relatedRecordId.ToString());
            url = AppendQuery(url, "relatedRecordType", relatedRecordType.ToString());

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "UploadImage",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var fileContent = new ByteArrayContent(file.Item2);
                fileContent.Headers.ContentDisposition.FileName = file.Item1;
                HttpResponseMessage response;
                using (var content = new MultipartFormDataContent("---------------------------" + DateTime.Now.ToString()))
                {
                    content.Add(fileContent, "file");
                    response = await client.PostAsync(url, content).ConfigureAwait(false);
                }
                stopwatch.Stop();
                var output = new WebProxyResponse<UploadedFileApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(UploadedFileApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<UploadedFileApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for WorkBreakDownApi
    /// </summary>
    public class WorkBreakDownApiWebProxy : BaseProxy, IWorkBreakDownApiWebProxy
    {
        public WorkBreakDownApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="updateDate"></param>
        public async Task<WorkBreakDownApiModel> Get(DateTime? updateDate)
        {
            var url = "api/WorkBreakDownApi"
            ;
            url = AppendQuery(url, "updateDate", updateDate.ToString());

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Get",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<WorkBreakDownApiModel>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(WorkBreakDownApiModel)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<WorkBreakDownApiModel>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for WorkCentreListApi
    /// </summary>
    public class WorkCentreListApiWebProxy : BaseProxy, IWorkCentreListApiWebProxy
    {
        public WorkCentreListApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="options"></param>
        public async Task<GridResult_AdminWorkCentreLine> Post(GridRequestParametersApi options)
        {
            var url = "api/WorkCentreListApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, options).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_AdminWorkCentreLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_AdminWorkCentreLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_AdminWorkCentreLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for WorkCentreLookupApi
    /// </summary>
    public class WorkCentreLookupApiWebProxy : BaseProxy, IWorkCentreLookupApiWebProxy
    {
        public WorkCentreLookupApiWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="options"></param>
        public async Task<GridResult_LookupsWorkCentreLine> Post(GridRequestParametersApi options)
        {
            var url = "api/WorkCentreLookupApi"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "Post",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, options).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<GridResult_LookupsWorkCentreLine>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(GridResult_LookupsWorkCentreLine)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<GridResult_LookupsWorkCentreLine>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    public class AccountApiModel
    {
        public int PersonID { get; set; }
        public string FullName { get; set; }
        public string FinCoCode { get; set; }
    }

    public class GridRequestParametersApi
    {
        public DynamicPredicateApi predicate { get; set; }
        public string sidx { get; set; }
        public string sord { get; set; }
        public int page { get; set; }
        public int rows { get; set; }
        public string jobCode { get; set; }
        public string finCoCode { get; set; }
        public functionalCodeValues functionalCode { get; set; }
        public int IntValue { get; set; }
        public string StringValue { get; set; }
        public bool BoolValue { get; set; }
        public DateTime DateValue { get; set; }
        public enum functionalCodeValues
        {
            General,
            PurchaseOrders,
            PurchaseOrderApproval,
            PurchaseRequisitions,
            Timesheets,
            TimesheetReviews,
            TimesheetApproval,
            TimesheetApprovalList,
            ServiceLog,
            ServiceDesk,
            ExpenseClaims,
            ExpenseClaimReviews,
            ExpenseClaimApproval,
            ExpenseClaimAdminApproval,
            TabletTimesheet,
            TabletTimePlant,
            Scheduler,
            LeaveManagement,
            LeaveTypeManagement,
            CrewTimesheets,
            Refueling,
            HumanResources,
            DailyDiary,
            Datasheets,
            CreditCards,
            Stock,
            LogDaysheet,
            PortalPeople,
            PortalCompany,
            Workflow,
            Reporting,
            ProfitCentres,
            ExternalSalesCodes,
            InternalSalesCodes,
            ActivityReportCode,
            ProfitCentreReportCode,
            SalesCodeReportCode,
            Batch,
            Budget,
            Billing,
            TimeCodes,
            Disbursement,
            Jobs,
            ApInvoices,
            Adjustments,
            Plant,
            NonStockLocation,
            JobContract,
            Processes,
            JobReceipt,
            Forecast,
            SubContracts,
            WorkOrderApproval,
            StockItem,
            ApInvoiceApproval,
            ApCreditApproval,
            TimesheetAdminApproval,
            DocketEntry,
            Revenue,
            Vouchers,
            VoucherApproval,
            Quotes,
            ProductionMeasures,
            StockIssue,
            Utilities,
            SubcontractClaimWorkflowApproval,
            BulkInvoice,
            WorkOrder,
            Activities,
            SalesCodes,
            ContractorDaysheet,
        }

    }

    public class DynamicPredicateApi
    {
        public List<DynamicPredicateRowApi> PredicateRows { get; set; }
        public bool IsOr { get; set; }
    }

    public class DynamicPredicateRowApi
    {
        public string LeftOperand { get; set; }
        public OperatorValues Operator { get; set; }
        public List<string> RightOperand { get; set; }
        public bool Display { get; set; }
        public enum OperatorValues
        {
            Lt,
            Gt,
            Eq,
            Ne,
            Le,
            Ge,
            Like,
            IsOneOf,
            IsNotOneOf,
            Between,
            StartsWith,
            StartsWithIsOneOf,
            Either,
        }

    }

    public class GridResult_AdminActivityLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<AdminActivityLine> rows { get; set; }
    }

    public class AdminActivityLine
    {
        public string ActivityCode { get; set; }
        public string Description { get; set; }
        public string ActivityCodeDescription { get; set; }
        public string ActivityType { get; set; }
        public string CostCategory { get; set; }
        public string ActivitySubType { get; set; }
        public string GstType { get; set; }
        public string WorkCentreCode { get; set; }
        public string SalesCode { get; set; }
        public string DrGLAccount { get; set; }
        public string CrGLAccount { get; set; }
        public DateTime UpdatedDate { get; set; }
        public CellData ActivityCodeValue { get; set; }
        public CellData DescriptionValue { get; set; }
        public CellData ActivityTypeValue { get; set; }
        public string CostCategoryValue { get; set; }
        public CellData GstTypeValue { get; set; }
        public CellData ActivitySubTypeValue { get; set; }
        public CellData WorkCentreCodeValue { get; set; }
        public CellData SalesCodeValue { get; set; }
        public CellData DrGLAccountValue { get; set; }
        public CellData CrGLAccountValue { get; set; }
        public bool BaseCostValue { get; set; }
        public bool OverheadCostValue { get; set; }
        public bool OtherCostValue { get; set; }
        public bool AllowanceCostValue { get; set; }
        public bool Time1CostValue { get; set; }
        public bool Time2CostValue { get; set; }
        public bool Time3CostValue { get; set; }
        public bool InactiveValue { get; set; }
        public CellData Select { get; set; }
        public CellData IncludedValue { get; set; }
        public bool Included { get; set; }
        public CellData Selected { get; set; }
        public CellData Delete { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public AdminActivityKey OriginalKey { get; set; }
        public AdminActivityKey CurrentKey { get; set; }
        public AdminActivityKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class Tuple_String
    {
        public string Item1 { get; set; }
        public string Item2 { get; set; }
    }

    public class CellData
    {
        public string CellId { get; set; }
        public string CellValue { get; set; }
        public double CellNumValue { get; set; }
        public bool CellBoolValue { get; set; }
        public string CellTag { get; set; }
        public DateTime CellValueDate { get; set; }
        public int CellValueInt { get; set; }
    }

    public class AdminActivityKey
    {
        public string ActivityCode { get; set; }
        public string RetentionActivityCode { get; set; }
    }

    public class GridResult_LookupsActivityLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<LookupsActivityLine> rows { get; set; }
    }

    public class LookupsActivityLine
    {
        public CellData Code { get; set; }
        public string Description { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public LookupsLookupKey OriginalKey { get; set; }
        public LookupsLookupKey CurrentKey { get; set; }
        public LookupsLookupKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class LookupsLookupKey
    {
        public string Code { get; set; }
    }

    public class APProcessingAPInvoiceKey
    {
        public int APInvoiceId { get; set; }
        public int BatchNo { get; set; }
        public string BatchType { get; set; }
        public int PONo { get; set; }
        public int CompanyId { get; set; }
        public int PersonId { get; set; }
        public bool IsApCredit { get; set; }
        public string FileUrl { get; set; }
        public bool Completed { get; set; }
    }

    public class APInvoiceJobTransactionApi
    {
        public StoredFilesApiModel StoredFile { get; set; }
        public APInvoiceApiModel Form { get; set; }
        public List<JobTransactionsJobTransactionLine> Rows { get; set; }
        public List<Tuple_String> ReadonlyMessages { get; set; }
        public List<MvcValidationError> ValidationErrors { get; set; }
        public string WarningMessage { get; set; }
        public string SuccessMessage { get; set; }
        public string ErrorMessage { get; set; }
    }

    public class StoredFilesApiModel
    {
        public StoredFilesApiKey Key { get; set; }
        public string RelatedRecord { get; set; }
        public string RelatedRecordId { get; set; }
        public int FileGroupId { get; set; }
        public string Details { get; set; }
        public string FileName { get; set; }
        public string Url { get; set; }
        public string successMessage { get; set; }
        public string warningMessage { get; set; }
        public string errorMessage { get; set; }
        public List<MvcValidationError> validationErrors { get; set; }
        public object form { get; set; }
        public object grid { get; set; }
        public string KeyStr { get; set; }
        public DateTime KeyDate { get; set; }
        public int KeyInt { get; set; }
    }

    public class APInvoiceApiModel
    {
        public APProcessingAPInvoiceKey Key { get; set; }
        public BoolViewData IncludeRelatedCredits { get; set; }
        public DropdownViewData ShowAmountAs { get; set; }
        public APProcessingAPInvoiceDialogHeader DialogHeader { get; set; }
        public APProcessingPOConfirmationDialog POConfirmationHeader { get; set; }
        public APProcessingAPInvoiceDialogGrid JobTransactions { get; set; }
        public APProcessingPOConfirmationDialogGrid POLines { get; set; }
    }

    public class JobTransactionsJobTransactionLine
    {
        public DateTime TranDate { get; set; }
        public string JobCode { get; set; }
        public string ActivityCode { get; set; }
        public string WorkCentreCode { get; set; }
        public double Quantity { get; set; }
        public double Cost { get; set; }
        public string GSTType { get; set; }
        public string GSTTypeDescription { get; set; }
        public double GST { get; set; }
        public double GSTRate { get; set; }
        public double NetValue { get; set; }
        public double Retail { get; set; }
        public string Reference { get; set; }
        public string LineDescription { get; set; }
        public string Details { get; set; }
        public int FromPONumber { get; set; }
        public string StockLocationCode { get; set; }
        public string StockItemCode { get; set; }
        public double TotalLineCost { get; set; }
        public double CostRate { get; set; }
        public int EnteredByID { get; set; }
        public int SourceID { get; set; }
        public CellData JobCodeValue { get; set; }
        public CellData ActivityCodeValue { get; set; }
        public CellData WorkCentreCodeValue { get; set; }
        public CellData QuantityValue { get; set; }
        public CellData CostValue { get; set; }
        public CellData GSTTypeValue { get; set; }
        public CellData GSTRateValue { get; set; }
        public CellData GSTValue { get; set; }
        public CellData NetValueValue { get; set; }
        public CellData ReferenceValue { get; set; }
        public CellData RetailValue { get; set; }
        public CellData LineDescriptionValue { get; set; }
        public CellData DetailsValue { get; set; }
        public CellData FromPONumberValue { get; set; }
        public CellData StockLocationCodeValue { get; set; }
        public CellData StockItemCodeValue { get; set; }
        public CellData TotalLineCostValue { get; set; }
        public CellData CostRateValue { get; set; }
        public CellData Delete { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public JobTransactionsJobTransactionDetailKey OriginalKey { get; set; }
        public JobTransactionsJobTransactionDetailKey CurrentKey { get; set; }
        public JobTransactionsJobTransactionDetailKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class MvcValidationError
    {
        public string n { get; set; }
        public string m { get; set; }
    }

    public class StoredFilesApiKey
    {
        public int StoredFileId { get; set; }
    }

    public class BoolViewData
    {
        public bool BoolValue { get; set; }
        public string Name { get; set; }
        public bool Visible { get; set; }
        public bool Disabled { get; set; }
        public bool Required { get; set; }
        public bool NoDirty { get; set; }
    }

    public class DropdownViewData
    {
        public string SelectedValue { get; set; }
        public string SelectedText { get; set; }
        public bool IsEmail { get; set; }
        public PickerViewDataAddon PickerViewDataAddon { get; set; }
        public bool Mismatch { get; set; }
        public string Name { get; set; }
        public bool Visible { get; set; }
        public bool Disabled { get; set; }
        public bool Required { get; set; }
        public bool DisableChange { get; set; }
        public bool NoDirty { get; set; }
        public ControlSizeValues ControlSize { get; set; }
        public FontStyleValues FontStyle { get; set; }
        public enum ControlSizeValues
        {
            None,
            Small,
        }

        public enum FontStyleValues
        {
            None,
            Bold,
            Italic,
        }

    }

    public class APProcessingAPInvoiceDialogHeader
    {
        public bool IsReviewed { get; set; }
        public bool IsApproved { get; set; }
        public StringViewData InvoiceNo { get; set; }
        public StringViewData APReference { get; set; }
        public DateViewData InvoiceDate { get; set; }
        public DateViewData PaymentDate { get; set; }
        public StringViewData Currency { get; set; }
        public DecimalViewData Rate { get; set; }
        public StringViewData BatchNo { get; set; }
        public StringViewData Period { get; set; }
        public PickerViewData PONo { get; set; }
        public StringViewData APInvoiceId { get; set; }
        public PickerViewData Supplier { get; set; }
        public StringViewData Status { get; set; }
        public StringViewData ApprovedBy { get; set; }
        public DateViewData Date { get; set; }
        public PickerViewData ApplyToInvoice { get; set; }
        public DecimalViewData Gst { get; set; }
        public DecimalViewData TotalInclGst { get; set; }
        public PickerViewData AssignedReviewer { get; set; }
        public PickerViewData AssignedApprover { get; set; }
        public StringViewData EnteredBy { get; set; }
        public StringViewData Comments { get; set; }
        public StringViewData FinancialCompanyCode { get; set; }
        public StringViewData FinancialCompany { get; set; }
        public int DataImportId { get; set; }
        public bool IsVoucherSourced { get; set; }
        public bool CanEdit { get; set; }
        public bool CanReview { get; set; }
        public bool CanApprove { get; set; }
        public bool CanUnapprove { get; set; }
        public bool CanDelete { get; set; }
        public bool CanPrint { get; set; }
        public bool IsNew { get; set; }
        public bool IsUpdated { get; set; }
        public double DefaultGstRate { get; set; }
    }

    public class APProcessingPOConfirmationDialog
    {
        public StringViewData Supplier { get; set; }
        public StringViewData Details { get; set; }
        public StringViewData FCCode { get; set; }
        public BoolViewData StandingPO { get; set; }
        public StringViewData PONo { get; set; }
        public StringViewData PODate { get; set; }
        public PickerViewData Default { get; set; }
        public StringViewData ApprovedBy { get; set; }
        public PickerViewData Filter { get; set; }
    }

    public class APProcessingAPInvoiceDialogGrid
    {
        public Layout Layout { get; set; }
        public List<JobTransactionsJobTransactionLine> Rows { get; set; }
    }

    public class APProcessingPOConfirmationDialogGrid
    {
        public Layout Layout { get; set; }
        public List<APProcessingPOConfirmationLine> Rows { get; set; }
    }

    public class JobTransactionsJobTransactionDetailKey
    {
        public int JobTranId { get; set; }
        public int PersonId { get; set; }
        public string JobCode { get; set; }
        public string FinCoCode { get; set; }
        public string ActivityCodeValue { get; set; }
        public string ActivityType { get; set; }
        public string ActivitySubType { get; set; }
        public string WorkCentreCodeValue { get; set; }
        public int StockItemCodeValue { get; set; }
        public string StockLocationCodeValue { get; set; }
        public double CostRateValue { get; set; }
        public string BatchType { get; set; }
        public bool OrderDerivedLine { get; set; }
        public bool DocketDerivedLine { get; set; }
    }

    public class KeyValuePair
    {
        public string Key { get; set; }
        public string Value { get; set; }
    }

    public class PickerViewDataAddon
    {
        public string NgClick { get; set; }
        public string NgDisabled { get; set; }
        public string Icon { get; set; }
        public string Title { get; set; }
    }

    public class LinkViewData
    {
        public string HRef { get; set; }
        public string OnClick { get; set; }
        public FieldTypeValues FieldType { get; set; }
        public bool AjaxButton { get; set; }
        public string Badge { get; set; }
        public object Attributes { get; set; }
        public string Area { get; set; }
        public string DialogAction { get; set; }
        public string DialogController { get; set; }
        public PickerUri DirectLink { get; set; }
        public string Name { get; set; }
        public string Prefix { get; set; }
        public string CssClass { get; set; }
        public bool Visible { get; set; }
        public bool Disabled { get; set; }
        public string FieldTypeValue { get; set; }
        public string FormId { get; set; }
        public int Width { get; set; }
        public bool Required { get; set; }
        public int TabIndex { get; set; }
        public string LabelTitle { get; set; }
        public string Tag { get; set; }
        public int CustomFieldColumnSize { get; set; }
        public bool RenderFieldOnly { get; set; }
        public string Placeholder { get; set; }
        public bool DisableChange { get; set; }
        public bool NoDirty { get; set; }
        public ControlSizeValues ControlSize { get; set; }
        public FontStyleValues FontStyle { get; set; }
        public enum FieldTypeValues
        {
            None,
            TextBox,
            DecimalText,
            CheckBox,
            Link,
            SplitButton,
            Button,
            Label,
            DateTime,
            Picker,
            PeriodEnd,
            Discussion,
            Spacer,
            Time,
            MenuButton,
            FilePicker,
            Radio,
            FileAttachments,
            TextAreaWithNote,
            Location,
            Section,
            Subsection,
            Question,
            Signature,
            ExtensionFields,
            Tabs,
            CronScheduler,
            Collapsible,
            StandardText,
            HtmlBox,
            Table,
        }

        public enum ControlSizeValues
        {
            None,
            Small,
        }

        public enum FontStyleValues
        {
            None,
            Bold,
            Italic,
        }

    }

    public class StringViewData
    {
        public string StringValue { get; set; }
        public bool IsEmail { get; set; }
        public bool RightAlign { get; set; }
        public string Name { get; set; }
        public bool Visible { get; set; }
        public bool Disabled { get; set; }
        public bool Required { get; set; }
        public bool NoDirty { get; set; }
    }

    public class DateViewData
    {
        public DateTime DateValue { get; set; }
        public string Name { get; set; }
        public bool Visible { get; set; }
        public bool Disabled { get; set; }
        public bool Required { get; set; }
        public bool NoDirty { get; set; }
    }

    public class DecimalViewData
    {
        public double DecimalValue { get; set; }
        public double MinValue { get; set; }
        public double MaxValue { get; set; }
        public double Step { get; set; }
        public bool RightAlign { get; set; }
        public int DecimalPlaces { get; set; }
        public bool HideSpinner { get; set; }
        public string Name { get; set; }
        public bool Visible { get; set; }
        public bool Disabled { get; set; }
        public bool Required { get; set; }
        public bool NoDirty { get; set; }
    }

    public class PickerViewData
    {
        public string SelectedValue { get; set; }
        public string SelectedText { get; set; }
        public bool IsEmail { get; set; }
        public PickerViewDataAddon PickerViewDataAddon { get; set; }
        public bool Mismatch { get; set; }
        public string Name { get; set; }
        public bool Visible { get; set; }
        public bool Disabled { get; set; }
        public bool Required { get; set; }
        public bool NoDirty { get; set; }
    }

    public class StandardTextViewData
    {
        public RenderCodeValues RenderCode { get; set; }
        public TextCodeValues TextCode { get; set; }
        public int KeyInt { get; set; }
        public string KeyStr { get; set; }
        public int Rows { get; set; }
        public bool Readonly { get; set; }
        public string Name1 { get; set; }
        public string Name2 { get; set; }
        public string Name3 { get; set; }
        public string Name4 { get; set; }
        public string Name5 { get; set; }
        public string Label1 { get; set; }
        public string Label2 { get; set; }
        public string Label3 { get; set; }
        public string Label4 { get; set; }
        public string Label5 { get; set; }
        public string Html1 { get; set; }
        public string Html2 { get; set; }
        public string Html3 { get; set; }
        public string Html4 { get; set; }
        public string Html5 { get; set; }
        public string Image1 { get; set; }
        public string Image2 { get; set; }
        public string Image3 { get; set; }
        public string Image4 { get; set; }
        public string Image5 { get; set; }
        public List<CodeDescription> Templates1 { get; set; }
        public List<CodeDescription> Templates2 { get; set; }
        public List<CodeDescription> Templates3 { get; set; }
        public List<CodeDescription> Templates4 { get; set; }
        public List<CodeDescription> Templates5 { get; set; }
        public string Name { get; set; }
        public bool Visible { get; set; }
        public bool Disabled { get; set; }
        public bool Required { get; set; }
        public string Placeholder { get; set; }
        public bool NoDirty { get; set; }
        public enum RenderCodeValues
        {
            None,
            Button,
            Inline,
        }

        public enum TextCodeValues
        {
            None,
            PurchaseOrder,
            WorkOrder,
            APInvoice,
            APCredit,
            JobSalesCredit,
            JobSalesInvoice,
            Quote,
        }

    }

    public class Layout
    {
        public string Caption { get; set; }
    }

    public class APProcessingPOConfirmationLine
    {
        public string JobCode { get; set; }
        public string WorkCentreCode { get; set; }
        public string LineDescription { get; set; }
        public string Details { get; set; }
        public double UnitRate { get; set; }
        public double OrderQuantity { get; set; }
        public double FCOrderCost { get; set; }
        public double ReceivedQuantity { get; set; }
        public double ReceivedValue { get; set; }
        public double FCUnitCost { get; set; }
        public double ThisQuantity { get; set; }
        public double ThisValue { get; set; }
        public double OutstandingQuantity { get; set; }
        public double OutstandingValue { get; set; }
        public double RemainingQuantity { get; set; }
        public double RemainingValue { get; set; }
        public double ReceiptedQuantity { get; set; }
        public double ReceiptedValue { get; set; }
        public bool LineCompleted { get; set; }
        public CellData JobCodeValue { get; set; }
        public CellData WorkCentreCodeValue { get; set; }
        public CellData LineDescriptionValue { get; set; }
        public CellData DetailsValue { get; set; }
        public CellData UnitRateValue { get; set; }
        public CellData OrderQuantityValue { get; set; }
        public CellData FCOrderCostValue { get; set; }
        public CellData ReceivedQuantityValue { get; set; }
        public CellData ReceivedValueValue { get; set; }
        public CellData FCUnitCostValue { get; set; }
        public CellData ThisQuantityValue { get; set; }
        public CellData ThisValueValue { get; set; }
        public CellData ThisGSTValue { get; set; }
        public CellData OutstandingQuantityValue { get; set; }
        public CellData OutstandingValueValue { get; set; }
        public CellData RemainingQuantityValue { get; set; }
        public CellData RemainingValueValue { get; set; }
        public CellData ReceiptedQuantityValue { get; set; }
        public CellData ReceiptedValueValue { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public APProcessingPOConfirmationKey OriginalKey { get; set; }
        public APProcessingPOConfirmationKey CurrentKey { get; set; }
        public APProcessingPOConfirmationKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class PickerUri
    {
        public object RouteValues { get; set; }
    }

    public class CodeDescription
    {
        public string Code { get; set; }
        public string Description { get; set; }
        public string Tag { get; set; }
        public CellData CodeValue { get; set; }
        public int CodeInt { get; set; }
    }

    public class GridModel
    {
        public string GridId { get; set; }
        public List<ColModel> ColModel { get; set; }
        public PickerUri ExportExcelUri { get; set; }
        public bool LoadFilters { get; set; }
        public bool HideHeaders { get; set; }
    }

    public class APProcessingPOConfirmationKey
    {
        public int PONumber { get; set; }
        public int PurchaseOrderLineId { get; set; }
    }

    public class ColModel
    {
        public bool Required { get; set; }
        public string Name { get; set; }
        public string Title { get; set; }
        public string Index { get; set; }
        public string GroupName { get; set; }
        public bool Grouping { get; set; }
        public bool Hidden { get; set; }
        public bool Editable { get; set; }
        public bool IsNumeric { get; set; }
        public bool HighlightNegative { get; set; }
        public string Classes { get; set; }
        public int DecimalPlaces { get; set; }
        public AlignValues Align { get; set; }
        public TextNotePositionValues TextNotePosition { get; set; }
        public enum AlignValues
        {
            None,
            Left,
            Right,
            Center,
        }

        public enum TextNotePositionValues
        {
            Left,
            Right,
        }

    }

    public class FooterModel
    {
        public object ViewData { get; set; }
        public SqlDbTypeValues SqlDbType { get; set; }
        public bool Editable { get; set; }
        public TotalFunctionValues TotalFunction { get; set; }
        public FormatterValues Formatter { get; set; }
        public string Label { get; set; }
        public bool LabelRightAlign { get; set; }
        public int LabelPosition { get; set; }
        public string Name { get; set; }
        public string Style { get; set; }
        public ExtraQuery SelectQuery { get; set; }
        public ExtraQuery UpdateQuery { get; set; }
        public bool Hidden { get; set; }
        public bool RowTotal { get; set; }
        public List<string> SkippedFields { get; set; }
        public bool IsCustomLayout { get; set; }
        public List<CustomFooterLayout> CustomFooterLayout { get; set; }
        public enum SqlDbTypeValues
        {
            BigInt,
            Binary,
            Bit,
            Char,
            DateTime,
            Decimal,
            Float,
            Image,
            Int,
            Money,
            NChar,
            NText,
            NVarChar,
            Real,
            UniqueIdentifier,
            SmallDateTime,
            SmallInt,
            SmallMoney,
            Text,
            Timestamp,
            TinyInt,
            VarBinary,
            VarChar,
            Variant,
            Xml,
            Udt,
            Structured,
            Date,
            Time,
            DateTime2,
            DateTimeOffset,
        }

        public enum TotalFunctionValues
        {
            None,
            Row,
            RowCustom,
            Column,
            ColumnPartitioned,
            Variance,
            VariancePartitioned,
            ColumnTime,
            ColumnKms,
            ColumnOther,
            ColumnRadio,
            ColumnPartitionedTime,
            ColumnPartitionedKms,
            ColumnPartitionedOther,
            ColumnDisbursements,
            ColumnReimbursements,
            ColumnAllowance,
            Attendance,
            AttendanceVariance,
        }

        public enum FormatterValues
        {
            Number,
            Label,
            Header,
            TextBox,
            CheckBox,
            CenteredLabel,
            Boolean,
        }

    }

    public class ColGroupingModel
    {
        public bool UseColSpanStyle { get; set; }
        public List<ColGroupHeader> GroupHeaders { get; set; }
    }

    public class PickerOptions
    {
        public string Code { get; set; }
        public ExtraQuery CellDataQuery { get; set; }
        public object DataList { get; set; }
        public List<KeyValuePair> DropdownList { get; set; }
        public PickerUri DataUrl { get; set; }
        public PickerUri DialogUrl { get; set; }
        public PickerUri DropdownUrl { get; set; }
        public int DropdownWidth { get; set; }
        public string SelectedText { get; set; }
        public string DialogTitle { get; set; }
        public int MinChars { get; set; }
        public string SelectedTextColumnName { get; set; }
        public string SelectedValueColumnName { get; set; }
        public FormatCodeValues FormatCode { get; set; }
        public bool NoClean { get; set; }
        public bool RequestDefaults { get; set; }
        public bool FileAttachments { get; set; }
        public string FileAttachmentsRelatedRecord { get; set; }
        public string FileAttachmentsExtensions { get; set; }
        public FileAttachmentsFunctionalCodeValues FileAttachmentsFunctionalCode { get; set; }
        public string KeyStr { get; set; }
        public int KeyInt { get; set; }
        public bool ShowAutoDeleteOption { get; set; }
        public enum FormatCodeValues
        {
            Default,
            CodeValue,
            Value,
            ValueText,
            Code,
        }

        public enum FileAttachmentsFunctionalCodeValues
        {
            General,
            PurchaseOrders,
            PurchaseOrderApproval,
            PurchaseRequisitions,
            Timesheets,
            TimesheetReviews,
            TimesheetApproval,
            TimesheetApprovalList,
            ServiceLog,
            ServiceDesk,
            ExpenseClaims,
            ExpenseClaimReviews,
            ExpenseClaimApproval,
            ExpenseClaimAdminApproval,
            TabletTimesheet,
            TabletTimePlant,
            Scheduler,
            LeaveManagement,
            LeaveTypeManagement,
            CrewTimesheets,
            Refueling,
            HumanResources,
            DailyDiary,
            Datasheets,
            CreditCards,
            Stock,
            LogDaysheet,
            PortalPeople,
            PortalCompany,
            Workflow,
            Reporting,
            ProfitCentres,
            ExternalSalesCodes,
            InternalSalesCodes,
            ActivityReportCode,
            ProfitCentreReportCode,
            SalesCodeReportCode,
            Batch,
            Budget,
            Billing,
            TimeCodes,
            Disbursement,
            Jobs,
            ApInvoices,
            Adjustments,
            Plant,
            NonStockLocation,
            JobContract,
            Processes,
            JobReceipt,
            Forecast,
            SubContracts,
            WorkOrderApproval,
            StockItem,
            ApInvoiceApproval,
            ApCreditApproval,
            TimesheetAdminApproval,
            DocketEntry,
            Revenue,
            Vouchers,
            VoucherApproval,
            Quotes,
            ProductionMeasures,
            StockIssue,
            Utilities,
            SubcontractClaimWorkflowApproval,
            BulkInvoice,
            WorkOrder,
            Activities,
            SalesCodes,
            ContractorDaysheet,
        }

    }

    public class DialogOptions
    {
        public PickerUri Uri { get; set; }
        public string Title { get; set; }
        public int Height { get; set; }
        public int Width { get; set; }
        public bool IsTabbed { get; set; }
        public string DataWarning { get; set; }
        public string Local { get; set; }
    }

    public class MenuOptions
    {
        public List<MenuOptionItem> Items { get; set; }
    }

    public class ExtraQuery
    {
        public SqlDbTypeValues SqlDbType { get; set; }
        public string Name { get; set; }
        public string Query { get; set; }
        public bool IsQueryStored { get; set; }
        public enum SqlDbTypeValues
        {
            BigInt,
            Binary,
            Bit,
            Char,
            DateTime,
            Decimal,
            Float,
            Image,
            Int,
            Money,
            NChar,
            NText,
            NVarChar,
            Real,
            UniqueIdentifier,
            SmallDateTime,
            SmallInt,
            SmallMoney,
            Text,
            Timestamp,
            TinyInt,
            VarBinary,
            VarChar,
            Variant,
            Xml,
            Udt,
            Structured,
            Date,
            Time,
            DateTime2,
            DateTimeOffset,
        }

    }

    public class CustomFooterLayout
    {
        public string Name { get; set; }
        public bool IsTotalRowCol { get; set; }
        public string PartitionKey { get; set; }
    }

    public class ColGroupHeader
    {
        public string ColName { get; set; }
        public string Title { get; set; }
        public int Width { get; set; }
    }

    public class MenuOptionItem
    {
        public string Name { get; set; }
        public bool Visible { get; set; }
        public PickerUri Uri { get; set; }
        public string FunctionName { get; set; }
        public bool HasPopupDialog { get; set; }
    }

    public class SaveResult
    {
        public string successMessage { get; set; }
        public string warningMessage { get; set; }
        public string errorMessage { get; set; }
        public List<MvcValidationError> validationErrors { get; set; }
        public object form { get; set; }
        public object grid { get; set; }
        public string KeyStr { get; set; }
        public DateTime KeyDate { get; set; }
        public int KeyInt { get; set; }
    }

    public class GridResult_APProcessingAPInvoiceLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<APProcessingAPInvoiceLine> rows { get; set; }
    }

    public class APProcessingAPInvoiceLine
    {
        public string InvoiceNumber { get; set; }
        public string CreditNumber { get; set; }
        public int SupplierId { get; set; }
        public string Supplier { get; set; }
        public DateTime Date { get; set; }
        public string Type { get; set; }
        public string SubContractCode { get; set; }
        public int BatchNo { get; set; }
        public string BatchRef { get; set; }
        public string APStatus { get; set; }
        public int AssignedApproverId { get; set; }
        public string AssignedApprover { get; set; }
        public int ApprovedById { get; set; }
        public string ApprovedBy { get; set; }
        public string Currency { get; set; }
        public double Amount { get; set; }
        public double ExGst { get; set; }
        public double Gst { get; set; }
        public double IncGst { get; set; }
        public double TotalPayment { get; set; }
        public double TotalCreditIncl { get; set; }
        public double LastPayment { get; set; }
        public int Year { get; set; }
        public int Period { get; set; }
        public int YearPeriodIndex { get; set; }
        public DateTime PaymentDate { get; set; }
        public string FinancialCompany { get; set; }
        public int PONumber { get; set; }
        public List<int> PONumberList { get; set; }
        public List<string> JobCodes { get; set; }
        public CellData InvoiceNumberValue { get; set; }
        public CellData SupplierValue { get; set; }
        public DateTime DateValue { get; set; }
        public CellData TypeValue { get; set; }
        public CellData BatchNoValue { get; set; }
        public CellData APStatusValue { get; set; }
        public CellData AssignedApproverValue { get; set; }
        public CellData ApprovedByValue { get; set; }
        public CellData CurrencyValue { get; set; }
        public CellData AmountValue { get; set; }
        public CellData ExGstValue { get; set; }
        public CellData GstValue { get; set; }
        public CellData IncGstValue { get; set; }
        public CellData TotalPaymentValue { get; set; }
        public CellData TotalCreditInclValue { get; set; }
        public CellData LastPaymentValue { get; set; }
        public DateTime LastPaymentDate { get; set; }
        public DateTime UpdatedDate { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public APProcessingAPInvoiceKey OriginalKey { get; set; }
        public APProcessingAPInvoiceKey CurrentKey { get; set; }
        public APProcessingAPInvoiceKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class APInvoicePurchaseOrderApi
    {
        public List<JobTransactionsJobTransactionLine> JobTransactions { get; set; }
        public StoredFilesApiModel StoredFile { get; set; }
        public APInvoiceApiModel Form { get; set; }
        public List<APProcessingPOConfirmationLine> Rows { get; set; }
        public List<Tuple_String> ReadonlyMessages { get; set; }
        public List<MvcValidationError> ValidationErrors { get; set; }
        public string WarningMessage { get; set; }
        public string SuccessMessage { get; set; }
        public string ErrorMessage { get; set; }
    }

    public class JobTransactionsJobTransactionKey
    {
        public int BatchNo { get; set; }
        public string BatchType { get; set; }
    }

    public class JobTransactionApiModel
    {
        public JobTransactionsJobTransactionKey Key { get; set; }
        public BatchBatchFields Fields { get; set; }
        public List<JobTransactionsJobTransactionLine> Rows { get; set; }
        public List<MvcValidationError> ValidationErrors { get; set; }
    }

    public class BatchBatchFields
    {
        public StringViewData BatchNo { get; set; }
        public StringViewData BatchType { get; set; }
        public DateViewData BatchDate { get; set; }
        public StringViewData Period { get; set; }
        public StringViewData CreatedBy { get; set; }
        public DateViewData CreatedDate { get; set; }
        public StringViewData Location { get; set; }
        public StringViewData FinancialCompany { get; set; }
        public BoolViewData Closed { get; set; }
        public DateViewData ClosedDate { get; set; }
        public StringViewData ClosedBy { get; set; }
        public BoolViewData Exported { get; set; }
        public DateViewData ExportedDate { get; set; }
        public StringViewData ExportedBy { get; set; }
        public BoolViewData NotForExport { get; set; }
        public DateViewData NotForExportDate { get; set; }
        public StringViewData NotForExportBy { get; set; }
        public StringViewData Reference { get; set; }
        public StringViewData BatchNotes { get; set; }
        public string HiddenBatchNotes { get; set; }
        public StringViewData BatchStatus { get; set; }
        public DecimalViewData BatchTotal { get; set; }
        public BoolViewData ReversingJournal { get; set; }
        public SplitButtonViewData Print { get; set; }
        public FileAttachmentsViewData AttachmentsDialog { get; set; }
        public ButtonViewData Import { get; set; }
        public OptionsViewData PayrollPeriod { get; set; }
    }

    public class SplitButtonViewData
    {
        public string Default { get; set; }
        public object Labels { get; set; }
        public bool UseAttrDisable { get; set; }
        public string Name { get; set; }
        public bool Visible { get; set; }
        public bool Disabled { get; set; }
        public bool DisableChange { get; set; }
        public bool NoDirty { get; set; }
        public ControlSizeValues ControlSize { get; set; }
        public FontStyleValues FontStyle { get; set; }
        public enum ControlSizeValues
        {
            None,
            Small,
        }

        public enum FontStyleValues
        {
            None,
            Bold,
            Italic,
        }

    }

    public class FileAttachmentsViewData
    {
        public string RelatedRecordID { get; set; }
        public string RelatedRecord { get; set; }
        public StringViewData FileUrl { get; set; }
        public BoolViewData MarkAsAutoDelete { get; set; }
        public bool EnableUploadOverride { get; set; }
        public bool ForMobile { get; set; }
        public bool EnableRelatedTab { get; set; }
        public Layout RelatedLayout { get; set; }
        public bool HideTitles { get; set; }
        public PickerViewData EmailPicker { get; set; }
        public string Name { get; set; }
        public string Placeholder { get; set; }
        public bool NoDirty { get; set; }
    }

    public class ButtonViewData
    {
        public bool UseAttrDisable { get; set; }
        public string Name { get; set; }
        public bool Visible { get; set; }
        public bool Disabled { get; set; }
        public bool NoDirty { get; set; }
    }

    public class OptionsViewData
    {
        public string SelectedOption { get; set; }
        public List<KeyValuePair> Settings { get; set; }
        public string Name { get; set; }
        public bool Visible { get; set; }
        public bool Disabled { get; set; }
        public bool Required { get; set; }
        public string Placeholder { get; set; }
        public bool NoDirty { get; set; }
    }

    public class SystemBatchApiRequest
    {
        public string BatchType { get; set; }
        public DateTime DocDate { get; set; }
        public string LocationCode { get; set; }
        public string FinCoCode { get; set; }
        public string BatchGroup { get; set; }
    }

    public class SystemBatchApiModel
    {
        public int BatchNo { get; set; }
        public string BatchType { get; set; }
        public DateTime BatchDate { get; set; }
        public int PeriodNo { get; set; }
        public int YearNo { get; set; }
        public int CreatedById { get; set; }
        public DateTime CreatedDateTime { get; set; }
        public string LocationCode { get; set; }
        public string CompanyCode { get; set; }
        public string BatchReference { get; set; }
        public string BatchNotes { get; set; }
        public int ClosedFlag { get; set; }
        public int ReversingJournal { get; set; }
        public DateTime ClosedDate { get; set; }
        public int ClosedById { get; set; }
        public int NotForExportFlag { get; set; }
        public DateTime NotForExportDate { get; set; }
        public int NotForExportId { get; set; }
        public DateTime ExportDate { get; set; }
        public int ExportedById { get; set; }
        public string ExportStatus { get; set; }
    }

    public class GridResult_BatchBatchLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<BatchBatchLine> rows { get; set; }
    }

    public class BatchBatchLine
    {
        public string Type { get; set; }
        public int BatchNo { get; set; }
        public DateTime Date { get; set; }
        public int Year { get; set; }
        public int Period { get; set; }
        public int YearPeriodIndex { get; set; }
        public DateTime CreatedDate { get; set; }
        public int CreatedById { get; set; }
        public string CreatedByName { get; set; }
        public string FinancialCompany { get; set; }
        public string Location { get; set; }
        public string Reference { get; set; }
        public string Notes { get; set; }
        public bool Closed { get; set; }
        public bool ReversingJournal { get; set; }
        public int ClosedById { get; set; }
        public bool NotForExport { get; set; }
        public bool Exported { get; set; }
        public int ExportedById { get; set; }
        public DateTime ExportDate { get; set; }
        public DateTime ClosedDate { get; set; }
        public string ExportStatus { get; set; }
        public string InterCoStatus { get; set; }
        public CellData Select { get; set; }
        public CellData Export { get; set; }
        public CellData TypeValue { get; set; }
        public CellData BatchNoValue { get; set; }
        public CellData DateValue { get; set; }
        public CellData YearPeriodValue { get; set; }
        public CellData CreatedByValue { get; set; }
        public CellData FinancialCompanyValue { get; set; }
        public CellData ReferenceValue { get; set; }
        public CellData NotesValue { get; set; }
        public CellData ClosedValue { get; set; }
        public CellData NotForExportValue { get; set; }
        public CellData ClosedDateValue { get; set; }
        public CellData ExportDateValue { get; set; }
        public CellData ExportStatusValue { get; set; }
        public CellData InterCo { get; set; }
        public CellData InterCoStatusValue { get; set; }
        public string BatchStatus { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public BatchBatchKey OriginalKey { get; set; }
        public BatchBatchKey CurrentKey { get; set; }
        public BatchBatchKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class BatchBatchKey
    {
        public int BatchNo { get; set; }
        public string BatchType { get; set; }
        public string FinCoCode { get; set; }
        public bool Exported { get; set; }
        public string InterCoStatus { get; set; }
    }

    public class GeneralCompanyKey
    {
        public int CompanyId { get; set; }
    }

    public class CompanyApiModel
    {
        public GeneralCompanyKey Key { get; set; }
        public GeneralCompanyMainFields Main { get; set; }
        public GeneralCompanyFinancialsFields Financials { get; set; }
        public CompanyApiGridLines_GeneralPersonLine People { get; set; }
        public CompanyApiGridLines_GeneralAttributeLine Attributes { get; set; }
        public CompanyApiGridLines_GeneralCompanyInsuranceLine CompanyInsurance { get; set; }
        public CompanyApiGridLines_GeneralAddressLine Addresses { get; set; }
        public CompanyApiGridLines_GeneralNoteLine Notes { get; set; }
        public CompanyApiGridLines_GeneralToDoLine ToDoItems { get; set; }
    }

    public class GeneralCompanyMainFields
    {
        public StringViewData CompanyId { get; set; }
        public StringViewData CompanyName { get; set; }
        public StringViewData AlphaCode { get; set; }
        public DropdownViewData CompanyType { get; set; }
        public PickerViewData PriceCode { get; set; }
        public PickerViewData Location { get; set; }
        public StringViewData Branch { get; set; }
        public DropdownViewData FinancialCompany { get; set; }
        public StringViewData ArAccount { get; set; }
        public StringViewData ApAccount { get; set; }
        public PickerViewData Currency { get; set; }
        public StringViewData CompanyReference { get; set; }
        public BoolViewData InactiveCompany { get; set; }
        public BoolViewData Client { get; set; }
        public BoolViewData Supplier { get; set; }
        public BoolViewData Subcontractor { get; set; }
        public BoolViewData Other { get; set; }
        public StringViewData GSTNumber { get; set; }
        public PickerViewData DefaultJobManager { get; set; }
        public PickerViewData DefaultAccountManager { get; set; }
    }

    public class GeneralCompanyFinancialsFields
    {
        public DecimalViewData PaymentTerms { get; set; }
        public DropdownViewData PaymentTermsType { get; set; }
        public DropdownViewData CreditStatus { get; set; }
        public DecimalViewData CashLimit { get; set; }
        public StringViewData BankAccountRef1 { get; set; }
        public StringViewData BankAccountRef2 { get; set; }
        public StringViewData BankAccountRef3 { get; set; }
        public BoolViewData UseGST { get; set; }
        public BoolViewData CashOnly { get; set; }
        public BoolViewData UseBuyerCreatedInvoices { get; set; }
    }

    public class CompanyApiGridLines_GeneralPersonLine
    {
        public List<GeneralPersonLine> Rows { get; set; }
    }

    public class CompanyApiGridLines_GeneralAttributeLine
    {
        public List<GeneralAttributeLine> Rows { get; set; }
    }

    public class CompanyApiGridLines_GeneralCompanyInsuranceLine
    {
        public List<GeneralCompanyInsuranceLine> Rows { get; set; }
    }

    public class CompanyApiGridLines_GeneralAddressLine
    {
        public List<GeneralAddressLine> Rows { get; set; }
    }

    public class CompanyApiGridLines_GeneralNoteLine
    {
        public List<GeneralNoteLine> Rows { get; set; }
    }

    public class CompanyApiGridLines_GeneralToDoLine
    {
        public List<GeneralToDoLine> Rows { get; set; }
    }

    public class GeneralPersonLine
    {
        public int PersonId { get; set; }
        public string DisplayName { get; set; }
        public string Surname { get; set; }
        public string FirstName { get; set; }
        public int CompanyId { get; set; }
        public string Company { get; set; }
        public string Role { get; set; }
        public string JobTitle { get; set; }
        public string EmailAddress { get; set; }
        public string MobilePhone { get; set; }
        public string BusinessPhone { get; set; }
        public bool IsEmployee { get; set; }
        public bool IsActive { get; set; }
        public bool Inactive { get; set; }
        public bool IsBillingContact { get; set; }
        public bool IsSiteContact { get; set; }
        public string EmployeeNo { get; set; }
        public SelectIdValues SelectId { get; set; }
        public SelectTagValues SelectTag { get; set; }
        public CellData Select { get; set; }
        public CellData PersonIdValue { get; set; }
        public CellData SurnameValue { get; set; }
        public CellData FirstNameValue { get; set; }
        public CellData CompanyValue { get; set; }
        public CellData RoleValue { get; set; }
        public CellData JobTitleValue { get; set; }
        public CellData EmailAddressValue { get; set; }
        public CellData MobilePhoneValue { get; set; }
        public CellData BusinessPhoneValue { get; set; }
        public CellData Delete { get; set; }
        public string Group1 { get; set; }
        public string Group2 { get; set; }
        public string Group3 { get; set; }
        public DateTime UpdatedDate { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public GeneralPersonKey OriginalKey { get; set; }
        public GeneralPersonKey CurrentKey { get; set; }
        public GeneralPersonKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
        public enum SelectIdValues
        {
            PersonId,
            DisplayName,
        }

        public enum SelectTagValues
        {
            DisplayName,
            EmailAddress,
        }

    }

    public class GeneralAttributeLine
    {
        public string Category { get; set; }
        public string Group { get; set; }
        public CellData CategoryValue { get; set; }
        public CellData GroupValue { get; set; }
        public CellData Value { get; set; }
        public CellData Delete { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public GeneralAttributeKey OriginalKey { get; set; }
        public GeneralAttributeKey CurrentKey { get; set; }
        public GeneralAttributeKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class GeneralCompanyInsuranceLine
    {
        public string Type { get; set; }
        public string Number { get; set; }
        public DateTime ExpiryDate { get; set; }
        public string Insurer { get; set; }
        public string Issuer { get; set; }
        public double Cover { get; set; }
        public double Excess { get; set; }
        public string Subcontract { get; set; }
        public string Description { get; set; }
        public string Details { get; set; }
        public CellData TypeValue { get; set; }
        public CellData NumberValue { get; set; }
        public CellData InsurerValue { get; set; }
        public CellData IssuerValue { get; set; }
        public CellData CoverValue { get; set; }
        public CellData ExcessValue { get; set; }
        public CellData SubcontractValue { get; set; }
        public CellData DescriptionValue { get; set; }
        public CellData DetailsValue { get; set; }
        public CellData Delete { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public GeneralCompanyInsuranceKey OriginalKey { get; set; }
        public GeneralCompanyInsuranceKey CurrentKey { get; set; }
        public GeneralCompanyInsuranceKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class GeneralAddressLine
    {
        public string Title { get; set; }
        public string Name { get; set; }
        public string Line1 { get; set; }
        public string Line2 { get; set; }
        public int CompanyId { get; set; }
        public string Company { get; set; }
        public bool Inactive { get; set; }
        public bool IsPostalAddress { get; set; }
        public bool IsPhysicalAddress { get; set; }
        public string Email { get; set; }
        public string Phone { get; set; }
        public string PostCode { get; set; }
        public CellData Select { get; set; }
        public CellData TitleValue { get; set; }
        public CellData NameValue { get; set; }
        public CellData Line1Value { get; set; }
        public CellData Line2Value { get; set; }
        public CellData CompanyValue { get; set; }
        public CellData EmailValue { get; set; }
        public CellData PhoneValue { get; set; }
        public CellData PostCodeValue { get; set; }
        public CellData HasMore { get; set; }
        public CellData Delete { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public GeneralAddressKey OriginalKey { get; set; }
        public GeneralAddressKey CurrentKey { get; set; }
        public GeneralAddressKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class GeneralNoteLine
    {
        public string Description { get; set; }
        public string Details { get; set; }
        public int NoteTypeId { get; set; }
        public string NoteType { get; set; }
        public int CreatedById { get; set; }
        public string CreatedBy { get; set; }
        public DateTime CreatedDate { get; set; }
        public string KeyTable { get; set; }
        public string EntityDescription { get; set; }
        public CellData Select { get; set; }
        public CellData DescriptionValue { get; set; }
        public CellData DetailsValue { get; set; }
        public CellData NoteTypeValue { get; set; }
        public CellData CreatedByValue { get; set; }
        public CellData CreatedDateValue { get; set; }
        public CellData EntityValue { get; set; }
        public CellData EntityDescriptionValue { get; set; }
        public CellData Delete { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public GeneralNoteKey OriginalKey { get; set; }
        public GeneralNoteKey CurrentKey { get; set; }
        public GeneralNoteKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class GeneralToDoLine
    {
        public string Description { get; set; }
        public string Details { get; set; }
        public int NoteTypeId { get; set; }
        public string NoteType { get; set; }
        public int NoteStatusId { get; set; }
        public string NoteStatus { get; set; }
        public int DoById { get; set; }
        public int CreatedByID { get; set; }
        public string DoBy { get; set; }
        public string KeyTable { get; set; }
        public string EntityDescription { get; set; }
        public DateTime DoByDate { get; set; }
        public bool Completed { get; set; }
        public CellData Select { get; set; }
        public CellData DescriptionValue { get; set; }
        public CellData DetailsValue { get; set; }
        public CellData NoteTypeValue { get; set; }
        public CellData NoteStatusValue { get; set; }
        public CellData DoByValue { get; set; }
        public CellData EntityValue { get; set; }
        public CellData EntityDescriptionValue { get; set; }
        public CellData DoByDateValue { get; set; }
        public CellData CompletedValue { get; set; }
        public CellData Delete { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public GeneralToDoKey OriginalKey { get; set; }
        public GeneralToDoKey CurrentKey { get; set; }
        public GeneralToDoKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class GeneralPersonKey
    {
        public int PersonId { get; set; }
    }

    public class GeneralAttributeKey
    {
        public string Category { get; set; }
        public string Group { get; set; }
    }

    public class GeneralCompanyInsuranceKey
    {
        public int CompanyInsuranceId { get; set; }
        public int CompanyId { get; set; }
    }

    public class GeneralAddressKey
    {
        public int AddressId { get; set; }
    }

    public class GeneralNoteKey
    {
        public int ToDoNoteId { get; set; }
        public string KeyTable { get; set; }
        public string GridId { get; set; }
    }

    public class GeneralToDoKey
    {
        public int ToDoNoteId { get; set; }
        public string KeyTable { get; set; }
    }

    public class GridResult_GeneralCompanyLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<GeneralCompanyLine> rows { get; set; }
    }

    public class GeneralCompanyLine
    {
        public int CompanyId { get; set; }
        public string CompanyName { get; set; }
        public string AlphaCode { get; set; }
        public string ApAccount { get; set; }
        public string ArAccount { get; set; }
        public string CreditStatus { get; set; }
        public string Location { get; set; }
        public string FinancialCompanyCode { get; set; }
        public string CompanyType { get; set; }
        public string Phone { get; set; }
        public bool Client { get; set; }
        public bool Supplier { get; set; }
        public bool Subcontractor { get; set; }
        public bool Other { get; set; }
        public bool Inactive { get; set; }
        public CellData Select { get; set; }
        public CellData CompanyNameValue { get; set; }
        public CellData AlphaCodeValue { get; set; }
        public CellData ApAccountValue { get; set; }
        public CellData ArAccountValue { get; set; }
        public CellData CreditStatusValue { get; set; }
        public CellData LocationValue { get; set; }
        public CellData FinancialCompanyCodeValue { get; set; }
        public CellData CompanyTypeValue { get; set; }
        public CellData PhoneValue { get; set; }
        public string Group1 { get; set; }
        public string Group2 { get; set; }
        public string Group3 { get; set; }
        public DateTime UpdatedDate { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public GeneralCompanyKey OriginalKey { get; set; }
        public GeneralCompanyKey CurrentKey { get; set; }
        public GeneralCompanyKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class ControlParameterApiModel
    {
        public DateTime Week1EndDate { get; set; }
        public int WeekEndingDayNumber { get; set; }
        public int TimeUnitsPerHour { get; set; }
    }

    public class AdminImportHeaderKey
    {
        public int ImportId { get; set; }
    }

    public class DataImportApiModel
    {
        public AdminImportHeaderKey Key { get; set; }
        public AdminImportLineFields Fields { get; set; }
    }

    public class AdminImportLineFields
    {
        public int ImportId { get; set; }
        public int StoredFileId { get; set; }
        public string ImportType { get; set; }
        public string BatchTypeEnum { get; set; }
        public StringViewData ImportProcedure { get; set; }
        public StringViewData ImportParameter { get; set; }
        public PickerViewData Batch { get; set; }
        public StringViewData Period { get; set; }
        public StringViewData BatchType { get; set; }
        public StringViewData BatchDate { get; set; }
        public FileViewData ImportFile { get; set; }
        public BoolViewData FirstLineHeading { get; set; }
        public DropdownViewData Delimeter { get; set; }
        public DropdownViewData FileExtension { get; set; }
        public StringViewData TabName { get; set; }
        public StringViewData Details { get; set; }
    }

    public class FileViewData
    {
        public string FileName { get; set; }
        public string ExtensionsAccepted { get; set; }
        public string Name { get; set; }
        public bool Visible { get; set; }
        public bool Disabled { get; set; }
        public bool Required { get; set; }
        public string Placeholder { get; set; }
        public bool NoDirty { get; set; }
    }

    public class GridResult_AdminImportHeaderLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<AdminImportHeaderLine> rows { get; set; }
    }

    public class AdminImportHeaderLine
    {
        public string Details { get; set; }
        public string Description { get; set; }
        public string ImportProcedure { get; set; }
        public CellData DetailsValue { get; set; }
        public CellData DescriptionValue { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public AdminImportHeaderKey OriginalKey { get; set; }
        public AdminImportHeaderKey CurrentKey { get; set; }
        public AdminImportHeaderKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class DatasheetsDatasheetKey
    {
        public int DatasheetId { get; set; }
        public int DatasheetTemplateId { get; set; }
    }

    public class DatasheetApiModel
    {
        public DatasheetsDatasheetKey Key { get; set; }
        public BoolViewData Completed { get; set; }
        public List<QuestionViewData> Questions { get; set; }
        public HeaderViewData Headers { get; set; }
        public List<FieldViewData> Fields { get; set; }
    }

    public class QuestionViewData
    {
        public int DatasheetLineId { get; set; }
        public int QuestionId { get; set; }
        public string Text { get; set; }
        public string Title { get; set; }
        public bool HasNotes { get; set; }
        public string Notes { get; set; }
        public bool BoolValue { get; set; }
        public string StringValue { get; set; }
        public DateTime DateValue { get; set; }
        public string TimeValue { get; set; }
        public int IntValue { get; set; }
        public double DecimalValue { get; set; }
        public string DisplayText { get; set; }
        public List<string> SelectList { get; set; }
        public TypeValues Type { get; set; }
        public string GetClass { get; set; }
        public int TemplateLineId { get; set; }
        public string Id { get; set; }
        public string Name { get; set; }
        public bool Visible { get; set; }
        public bool Disabled { get; set; }
        public bool Required { get; set; }
        public string Placeholder { get; set; }
        public bool NoDirty { get; set; }
        public enum TypeValues
        {
            Boolean,
            Text,
            Date,
            DateTime,
            Integer,
            Currency,
            Decimal,
            TextMultiLine,
            JobPicker,
            PersonPicker,
            EmployeePicker,
            Time,
        }

    }

    public class HeaderViewData
    {
        public List<FieldViewData> Headers { get; set; }
        public List<HeaderColumnViewData> Columns { get; set; }
    }

    public class FieldViewData
    {
        public string Name { get; set; }
        public bool Visible { get; set; }
        public bool Disabled { get; set; }
        public bool Required { get; set; }
        public string Placeholder { get; set; }
        public bool NoDirty { get; set; }
    }

    public class HeaderColumnViewData
    {
        public int ColumnNo { get; set; }
        public List<FieldViewData> Headers { get; set; }
    }

    public class GridResult_DatasheetsDatasheetModelLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<DatasheetsDatasheetModelLine> rows { get; set; }
    }

    public class DatasheetsDatasheetModelLine
    {
        public CellData Template { get; set; }
        public string Date { get; set; }
        public string Name { get; set; }
        public string KeyTable { get; set; }
        public string Subject { get; set; }
        public double Rating { get; set; }
        public bool Complete { get; set; }
        public string JSON { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public DatasheetsDatasheetKey OriginalKey { get; set; }
        public DatasheetsDatasheetKey CurrentKey { get; set; }
        public DatasheetsDatasheetKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class DatasheetsDialogFields
    {
        public DateViewData Date { get; set; }
        public PickerViewData Template { get; set; }
        public PickerViewData Assignee { get; set; }
        public PickerViewData Job { get; set; }
        public PickerViewData Plant { get; set; }
        public PickerViewData Company { get; set; }
        public PickerViewData Person { get; set; }
        public PickerViewData SubContract { get; set; }
        public PickerViewData Log { get; set; }
        public StringViewData Subject { get; set; }
        public StringViewData Comments { get; set; }
    }

    public class GridResult_DatasheetsTemplateLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<DatasheetsTemplateLine> rows { get; set; }
    }

    public class DatasheetsTemplateLine
    {
        public CellData Description { get; set; }
        public CellData Header { get; set; }
        public bool Deactivated { get; set; }
        public CellData DeactivatedValue { get; set; }
        public string Details { get; set; }
        public string KeyTable { get; set; }
        public string DatasheetType { get; set; }
        public string JSON { get; set; }
        public CellData Select { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public DatasheetsTemplateKey OriginalKey { get; set; }
        public DatasheetsTemplateKey CurrentKey { get; set; }
        public DatasheetsTemplateKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class DatasheetsTemplateKey
    {
        public int DatasheetTemplateId { get; set; }
    }

    public class Api_Controllers_GridApiKey
    {
        public string LayoutName { get; set; }
    }

    public class BudgetJobBudgetKey
    {
        public string JobCode { get; set; }
        public int EstimateId { get; set; }
        public int EstimateLineId { get; set; }
        public double BomQuantity { get; set; }
        public bool IsJournal { get; set; }
    }

    public class JobBudgetApiModel
    {
        public BudgetJobBudgetKey Key { get; set; }
        public List<BudgetBudgetLine> Rows { get; set; }
        public PickerViewData BudgetType { get; set; }
        public StringViewData Job { get; set; }
        public StringViewData Client { get; set; }
        public PickerViewData Contact { get; set; }
        public StringViewData Description { get; set; }
        public StringViewData Details { get; set; }
        public StringViewData InternalReference { get; set; }
        public StringViewData ClientReference { get; set; }
        public DateViewData BudgetDate { get; set; }
        public StringViewData YearPeriod { get; set; }
        public StringViewData Currency { get; set; }
        public DecimalViewData CurrencyRate { get; set; }
        public StringViewData CreatedBy { get; set; }
        public StringViewData ApprovedBy { get; set; }
        public DateViewData ApprovedDate { get; set; }
        public DropdownViewData GridSort { get; set; }
        public DropdownViewData GridStructure { get; set; }
        public PickerViewData BillOfMaterials { get; set; }
        public List<MvcValidationError> ValidationErrors { get; set; }
    }

    public class BudgetBudgetLine
    {
        public CellData Approved { get; set; }
        public CellData JobCode { get; set; }
        public CellData BudgetType { get; set; }
        public CellData Type { get; set; }
        public CellData LineCode { get; set; }
        public CellData PlantRate { get; set; }
        public CellData ActivityCode { get; set; }
        public CellData ActivityType { get; set; }
        public CellData WorkCentreCode { get; set; }
        public CellData YearPeriod { get; set; }
        public CellData Description { get; set; }
        public CellData Unit { get; set; }
        public CellData Quantity { get; set; }
        public CellData CostRate { get; set; }
        public CellData Cost { get; set; }
        public CellData FCRetailRate { get; set; }
        public CellData FCRevenue { get; set; }
        public CellData Details { get; set; }
        public GridResult_BudgetBudgetSubLine SubGridResult { get; set; }
        public CellData Delete { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public BudgetBudgetLineKey OriginalKey { get; set; }
        public BudgetBudgetLineKey CurrentKey { get; set; }
        public BudgetBudgetLineKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class GridResult_BudgetBudgetSubLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<BudgetBudgetSubLine> rows { get; set; }
    }

    public class BudgetBudgetLineKey
    {
        public int ParentLine { get; set; }
        public int ChildLine { get; set; }
        public int EstimateId { get; set; }
        public int EstimateLineId { get; set; }
        public string JobCode { get; set; }
        public string ActivityCode { get; set; }
        public string WorkCentreCode { get; set; }
        public string Type { get; set; }
        public string LineCode { get; set; }
    }

    public class BudgetBudgetSubLine
    {
        public CellData Approved { get; set; }
        public CellData JobCode { get; set; }
        public CellData Type { get; set; }
        public CellData LineCode { get; set; }
        public CellData PlantRate { get; set; }
        public CellData ActivityCode { get; set; }
        public CellData WorkCentreCode { get; set; }
        public CellData YearNo { get; set; }
        public CellData PeriodNo { get; set; }
        public CellData Description { get; set; }
        public CellData Unit { get; set; }
        public CellData Quantity { get; set; }
        public CellData CostRate { get; set; }
        public CellData Cost { get; set; }
        public CellData FCRetailRate { get; set; }
        public CellData FCRevenue { get; set; }
        public CellData Details { get; set; }
        public CellData Delete { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public BudgetBudgetSubLineKey OriginalKey { get; set; }
        public BudgetBudgetSubLineKey CurrentKey { get; set; }
        public BudgetBudgetSubLineKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class BudgetBudgetSubLineKey
    {
        public int Id { get; set; }
        public int ChildLine { get; set; }
        public int EstimateId { get; set; }
        public int EstimateLineId { get; set; }
        public string JobCode { get; set; }
        public string ActivityCode { get; set; }
        public string WorkCentreCode { get; set; }
        public string Type { get; set; }
        public string LineCode { get; set; }
        public string PlantRate { get; set; }
    }

    public class GridResult_BudgetJobBudgetLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<BudgetJobBudgetLine> rows { get; set; }
    }

    public class BudgetJobBudgetLine
    {
        public int BudgetOrder { get; set; }
        public string BudgetHeader { get; set; }
        public string BudgetType { get; set; }
        public string InternalReference { get; set; }
        public string ClientReference { get; set; }
        public string Description { get; set; }
        public int Year { get; set; }
        public int Period { get; set; }
        public int YearPeriodIndex { get; set; }
        public DateTime EstimateDate { get; set; }
        public double CostRate { get; set; }
        public double Cost { get; set; }
        public double RetailRate { get; set; }
        public double Revenue { get; set; }
        public bool Approved { get; set; }
        public DateTime ApprovedDate { get; set; }
        public CellData BudgetTypeValue { get; set; }
        public CellData BudgetHeaderValue { get; set; }
        public CellData InternalReferenceValue { get; set; }
        public CellData ClientReferenceValue { get; set; }
        public CellData DescriptionValue { get; set; }
        public CellData YearPeriodValue { get; set; }
        public CellData EstimateDateValue { get; set; }
        public CellData CostRateValue { get; set; }
        public CellData CostValue { get; set; }
        public CellData RetailRateValue { get; set; }
        public CellData RevenueValue { get; set; }
        public CellData ApprovedDateValue { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public BudgetJobBudgetKey OriginalKey { get; set; }
        public BudgetJobBudgetKey CurrentKey { get; set; }
        public BudgetJobBudgetKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class GeneralJobKey
    {
        public string JobCode { get; set; }
    }

    public class JobApiModel
    {
        public GeneralJobKey Key { get; set; }
        public GeneralJobMainFields Main { get; set; }
        public JobApiFields_GeneralAttributeLine Attributes { get; set; }
        public JobApiFields_GeneralToDoLine ToDoItems { get; set; }
        public JobApiFields_GeneralNoteLine Notes { get; set; }
        public JobApiReportsFields Reporting { get; set; }
        public JobApiFields_DatasheetsDatasheetModelLine Datasheets { get; set; }
        public List<MvcValidationError> ValidationErrors { get; set; }
    }

    public class GeneralJobMainFields
    {
        public StringViewData JobCode { get; set; }
        public StringViewData Description { get; set; }
        public StringViewData JobLevel { get; set; }
        public StringViewData ParentJob { get; set; }
        public StringViewData Client { get; set; }
        public PickerViewData ProfitCentre { get; set; }
        public PickerViewData JobManager { get; set; }
        public PickerViewData AccountManager { get; set; }
        public PickerViewData PriceCode { get; set; }
        public PickerViewData JobType { get; set; }
        public PickerViewData JobStatus { get; set; }
        public BoolViewData Closed { get; set; }
        public BoolViewData ClosedSubJobs { get; set; }
        public BoolViewData Finalised { get; set; }
        public BoolViewData FinalisedSubJobs { get; set; }
        public StringViewData Details { get; set; }
        public bool CurrencyValid { get; set; }
        public PickerViewData Company { get; set; }
        public PickerViewData ChargeType { get; set; }
        public PickerViewData InvoiceType { get; set; }
        public PickerViewData CurrencyCode { get; set; }
        public PickerViewData ScheduleCode { get; set; }
        public PickerViewData ActivityGroup { get; set; }
        public BoolViewData UseGST { get; set; }
        public DateViewData CreatedDate { get; set; }
    }

    public class JobApiFields_GeneralAttributeLine
    {
        public List<GeneralAttributeLine> Rows { get; set; }
    }

    public class JobApiFields_GeneralToDoLine
    {
        public List<GeneralToDoLine> Rows { get; set; }
    }

    public class JobApiFields_GeneralNoteLine
    {
        public List<GeneralNoteLine> Rows { get; set; }
    }

    public class JobApiReportsFields
    {
        public string ParameterName { get; set; }
        public string ParameterValue { get; set; }
    }

    public class JobApiFields_DatasheetsDatasheetModelLine
    {
        public List<DatasheetsDatasheetModelLine> Rows { get; set; }
    }

    public class GridResult_GeneralJobLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<GeneralJobLine> rows { get; set; }
    }

    public class GeneralJobLine
    {
        public string JobCode { get; set; }
        public string Description { get; set; }
        public string CodeDescription { get; set; }
        public string Company { get; set; }
        public int CompanyId { get; set; }
        public int Level { get; set; }
        public string ProfitCentre { get; set; }
        public bool Finalised { get; set; }
        public string OpenClosed { get; set; }
        public int OpenClosedCode { get; set; }
        public string Status { get; set; }
        public string JobManager { get; set; }
        public int JobManagerId { get; set; }
        public string AccountManager { get; set; }
        public int AccountManagerId { get; set; }
        public string JobType { get; set; }
        public int JobLevel { get; set; }
        public string FinancialCompany { get; set; }
        public string ChargeType { get; set; }
        public bool HasContract { get; set; }
        public bool HasSubcontract { get; set; }
        public int RequiresSchedule { get; set; }
        public int JobSiteAddressID { get; set; }
        public string JobSiteAddress { get; set; }
        public string JobSiteAddressDetails { get; set; }
        public string OrderNumber { get; set; }
        public string ClientReference { get; set; }
        public string QuoteReference { get; set; }
        public string JobReference { get; set; }
        public DateTime CreatedDate { get; set; }
        public DateTime FinalisedDate { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime CompletedDate { get; set; }
        public bool IncludeSubjobs { get; set; }
        public string HierarchyCode1 { get; set; }
        public string HierarchyCode2 { get; set; }
        public string HierarchyCode3 { get; set; }
        public string HierarchyCode4 { get; set; }
        public string HierarchyCode5 { get; set; }
        public string HierarchyCode6 { get; set; }
        public CellData Select { get; set; }
        public CellData JobCodeValue { get; set; }
        public CellData DescriptionValue { get; set; }
        public CellData CompanyValue { get; set; }
        public CellData LevelValue { get; set; }
        public CellData ProfitCentreValue { get; set; }
        public CellData OpenClosedValue { get; set; }
        public CellData StatusValue { get; set; }
        public CellData JobManagerValue { get; set; }
        public CellData AccountManagerValue { get; set; }
        public CellData JobTypeValue { get; set; }
        public CellData ChargeTypeValue { get; set; }
        public CellData HasContractValue { get; set; }
        public string Group1 { get; set; }
        public string Group2 { get; set; }
        public string Group3 { get; set; }
        public DateTime UpdatedDate { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public GeneralJobKey OriginalKey { get; set; }
        public GeneralJobKey CurrentKey { get; set; }
        public GeneralJobKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class JobsMaintenanceKey
    {
        public string JobCode { get; set; }
    }

    public class JobMaintenanceApiModel
    {
        public JobsMaintenanceKey Key { get; set; }
        public JobsJobFields JobFields { get; set; }
        public JobsWizardFields WizardFields { get; set; }
        public JobsContractFields ContractFields { get; set; }
        public List<MvcValidationError> ValidationErrors { get; set; }
    }

    public class JobsJobFields
    {
        public string JobCode { get; set; }
        public bool HasContract { get; set; }
        public bool CurrencyValid { get; set; }
        public JobsGeneralFields GeneralFields { get; set; }
        public JobsBillingFields BillingFields { get; set; }
        public JobsReferencesFields ReferencesFields { get; set; }
        public JobsAddressesFields AddressesFields { get; set; }
        public JobsJobGroupsFields JobGroupsFields { get; set; }
        public JobsJobWorkCentresFields JobWorkCentresFields { get; set; }
        public JobsJobSchedulesFields JobSchedulesFields { get; set; }
        public JobsDocketCostSchedulesFields DocketCostSchedulesFields { get; set; }
    }

    public class JobsWizardFields
    {
        public OptionsViewData Level { get; set; }
        public StringViewData Name { get; set; }
        public PickerViewData Client { get; set; }
        public PickerViewData ParentJob { get; set; }
        public OptionsViewData CreateJob { get; set; }
        public PickerViewData JobTemplate { get; set; }
        public PickerViewData Template { get; set; }
        public StringViewData JobCode { get; set; }
    }

    public class JobsContractFields
    {
        public OptionsViewData HaveContract { get; set; }
        public DropdownViewData Status { get; set; }
        public BoolViewData BriefConfirmed { get; set; }
        public DropdownViewData ContractType { get; set; }
        public DropdownViewData RetentionType { get; set; }
        public StringViewData Site { get; set; }
        public StringViewData ForeignCurrency { get; set; }
        public string ForeignCurrencyCode { get; set; }
        public DropdownViewData CurrencyRateType { get; set; }
        public DecimalViewData CurrencyRate { get; set; }
        public DropdownViewData NonContractBilling { get; set; }
        public bool AncestorHasContract { get; set; }
    }

    public class JobsGeneralFields
    {
        public StringViewData Name { get; set; }
        public PickerViewData Company { get; set; }
        public PickerViewData JobManager { get; set; }
        public PickerViewData AccountManager { get; set; }
        public PickerViewData ProfitCentre { get; set; }
        public PickerViewData JobType { get; set; }
        public StringViewData Contract { get; set; }
        public PickerViewData ParentJob { get; set; }
        public StringViewData JobHierarchy { get; set; }
        public StringViewData JobLevel { get; set; }
        public DropdownViewData JobStatus { get; set; }
        public PickerViewData CostActivityGroup { get; set; }
        public PickerViewData BudgetActivityGroup { get; set; }
        public PickerViewData ForecastActivityGroup { get; set; }
        public PickerViewData BillingCurrency { get; set; }
        public DropdownViewData CheckAgainstBudget { get; set; }
        public StringViewData JobDetails { get; set; }
        public BoolViewData UseGst { get; set; }
        public BoolViewData AdminJob { get; set; }
        public BoolViewData ReqSched { get; set; }
        public string TemplateCode { get; set; }
    }

    public class JobsBillingFields
    {
        public PickerViewData PriceCode { get; set; }
        public PickerViewData ChargeType { get; set; }
        public PickerViewData WipCode { get; set; }
        public PickerViewData InvoiceType { get; set; }
        public StringViewData ClientCreditStatus { get; set; }
        public DecimalViewData JobValue { get; set; }
        public StringViewData DrAccount { get; set; }
        public StringViewData CrAccount { get; set; }
        public StringViewData InvoiceTitle { get; set; }
        public StringViewData InvoiceText { get; set; }
        public DropdownViewData EmployeeAgreementScheme { get; set; }
        public DropdownViewData LabourCostingGroup { get; set; }
    }

    public class JobsReferencesFields
    {
        public StringViewData OrderNumber { get; set; }
        public StringViewData JobReference { get; set; }
        public StringViewData ClientReference { get; set; }
        public StringViewData QuoteReference { get; set; }
        public StringViewData CreatedDate { get; set; }
        public DateViewData StartDate { get; set; }
        public DateViewData ClosedDate { get; set; }
        public DateViewData RequiredDate { get; set; }
        public DateViewData ExpectedDate { get; set; }
        public DateViewData FinalisedDate { get; set; }
    }

    public class JobsAddressesFields
    {
        public PickerViewData BillingAddress { get; set; }
        public PickerViewData SiteAddress { get; set; }
        public StringViewData SiteAddressDetails { get; set; }
        public PickerViewData BillingContact { get; set; }
        public PickerViewData SiteContact { get; set; }
    }

    public class JobsJobGroupsFields
    {
        public Layout Layout { get; set; }
        public List<JobsJobGroupLine> Rows { get; set; }
    }

    public class JobsJobWorkCentresFields
    {
        public Layout Layout { get; set; }
        public List<JobsJobWorkCentreLine> Rows { get; set; }
    }

    public class JobsJobSchedulesFields
    {
        public Layout Layout { get; set; }
        public List<JobsJobScheduleLine> Rows { get; set; }
    }

    public class JobsDocketCostSchedulesFields
    {
        public Layout Layout { get; set; }
        public List<JobsDocketCostScheduleLine> Rows { get; set; }
    }

    public class JobsJobGroupLine
    {
        public CellData Category { get; set; }
        public CellData Group { get; set; }
        public CellData Value { get; set; }
        public CellData Delete { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public JobsJobGroupKey OriginalKey { get; set; }
        public JobsJobGroupKey CurrentKey { get; set; }
        public JobsJobGroupKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class JobsJobWorkCentreLine
    {
        public CellData Job { get; set; }
        public CellData WorkCentre { get; set; }
        public CellData Description { get; set; }
        public CellData BalanceOfBudget { get; set; }
        public bool Closed { get; set; }
        public bool Complete { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public CellData Delete { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public JobsJobWorkCentreKey OriginalKey { get; set; }
        public JobsJobWorkCentreKey CurrentKey { get; set; }
        public JobsJobWorkCentreKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class JobsJobScheduleLine
    {
        public CellData Schedule { get; set; }
        public CellData Type { get; set; }
        public CellData Delete { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public JobsJobScheduleKey OriginalKey { get; set; }
        public JobsJobScheduleKey CurrentKey { get; set; }
        public JobsJobScheduleKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class JobsDocketCostScheduleLine
    {
        public CellData Catalogue { get; set; }
        public CellData ActivityGroup { get; set; }
        public CellData Delete { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public JobsDocketCostScheduleKey OriginalKey { get; set; }
        public JobsDocketCostScheduleKey CurrentKey { get; set; }
        public JobsDocketCostScheduleKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class JobsJobGroupKey
    {
        public string Job { get; set; }
        public string Category { get; set; }
        public string Group { get; set; }
    }

    public class JobsJobWorkCentreKey
    {
        public string JobCode { get; set; }
        public string WorkCentreCode { get; set; }
    }

    public class JobsJobScheduleKey
    {
        public string Job { get; set; }
        public string Schedule { get; set; }
    }

    public class JobsDocketCostScheduleKey
    {
        public string Job { get; set; }
        public int Catalogue { get; set; }
    }

    public class LogErrorApiModel
    {
        public string Message { get; set; }
        public string Exception { get; set; }
        public string Version { get; set; }
    }

    public class TabletLogMaintenanceKey
    {
        public int LogHeaderId { get; set; }
    }

    public class LogHeaderApiModel
    {
        public int LogHeaderID { get; set; }
        public DateTime LogDate { get; set; }
        public DateTime LogTime { get; set; }
        public int LogBy { get; set; }
        public LogHeaderPersonApiModel LogByPerson { get; set; }
        public string Status { get; set; }
        public string StreetNo { get; set; }
        public string Street { get; set; }
        public string Ward { get; set; }
        public string Suburb { get; set; }
        public string Phone { get; set; }
        public string Priority { get; set; }
        public string ContractRef { get; set; }
        public string LogType { get; set; }
        public string ProfitCentreCode { get; set; }
        public int CompanyID { get; set; }
        public string OrderNo { get; set; }
        public int InvContact { get; set; }
        public string InvPhone { get; set; }
        public int Parent { get; set; }
        public int Child { get; set; }
        public int Allocation { get; set; }
        public LogHeaderPersonApiModel AllocationPerson { get; set; }
        public string LocationCode { get; set; }
        public string ServiceType { get; set; }
        public string JobCode { get; set; }
        public DateTime SchdDate { get; set; }
        public DateTime SchdTime { get; set; }
        public DateTime CompletedTime { get; set; }
        public DateTime CompletedDate { get; set; }
        public int SiteContact { get; set; }
        public string SitePhone { get; set; }
        public string Description { get; set; }
        public string PONumber { get; set; }
        public DateTime FinalDate { get; set; }
        public DateTime FinalTime { get; set; }
        public string Escalation { get; set; }
        public string EscalationTime { get; set; }
        public int SalesOrderNo { get; set; }
        public double ExpectedHours { get; set; }
        public string ContactDetails { get; set; }
        public DateTime ArriveDate { get; set; }
        public DateTime ArriveTime { get; set; }
        public int SiteAddressID { get; set; }
        public DateTime RestoreDate { get; set; }
        public DateTime RestoreTime { get; set; }
        public int CompletedByID { get; set; }
        public int FinalisedByID { get; set; }
        public string Comment { get; set; }
        public DateTime EventTimeStamp { get; set; }
        public int DispatcherID { get; set; }
        public int ServiceAgreementID { get; set; }
        public string SiteContactName { get; set; }
        public string InvoiceContactName { get; set; }
        public DateTime NextEscalationRunDate { get; set; }
        public string City { get; set; }
        public string Country { get; set; }
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public string LogAddress { get; set; }
        public int ReviewByID { get; set; }
        public int AssetTaskID { get; set; }
        public int RunID { get; set; }
        public DateTime SchdDateNext { get; set; }
        public DateTime SchdTimeNext { get; set; }
        public double PercentComplete { get; set; }
        public double ActualTimeUnitsQuantity { get; set; }
        public int WorkGroupID { get; set; }
        public int SequenceNumber { get; set; }
        public DateTime SchdDateOriginal { get; set; }
        public DateTime SchdTimeOriginal { get; set; }
        public int SentFlag { get; set; }
        public int WorkOrderNo { get; set; }
        public double OutputQuantity { get; set; }
        public double SchdDateHours { get; set; }
        public double SchdDateMaximumHours { get; set; }
        public double RestoreDateTargetHours { get; set; }
        public double CompleteDateTargetHours { get; set; }
        public double StartedDateActualHours { get; set; }
        public double RestoreDateActualHours { get; set; }
        public double CompletedDateLDHours { get; set; }
        public string SchdDateUnits { get; set; }
        public string SchdDateMaximumUnits { get; set; }
        public string RestoreDateTargetUnits { get; set; }
        public string CompleteDateTargetUnits { get; set; }
        public string StartedDateActualUnits { get; set; }
        public string RestoreDateActualUnits { get; set; }
        public string CompletedDateLDUnits { get; set; }
        public DateTime SchdDateTarget { get; set; }
        public DateTime SchdTimeTarget { get; set; }
        public DateTime SchdDateMaximum { get; set; }
        public DateTime SchdTimeMaximum { get; set; }
        public DateTime RestoreDateTarget { get; set; }
        public DateTime RestoreTimeTarget { get; set; }
        public DateTime StartedDateActual { get; set; }
        public DateTime StartedTimeActual { get; set; }
        public DateTime RestoreDateActual { get; set; }
        public DateTime RestoreTimeActual { get; set; }
        public DateTime CompleteDateTarget { get; set; }
        public DateTime CompleteTimeTarget { get; set; }
        public double ArriveDateLDHours { get; set; }
        public string ArriveDateLDUnits { get; set; }
        public double FinalDateLDHours { get; set; }
        public string FinalDateLDUnits { get; set; }
        public DateTime CancelledDate { get; set; }
        public DateTime CancelledTime { get; set; }
        public int CancelledByID { get; set; }
        public int AssetID { get; set; }
        public string CompletionDetails { get; set; }
        public string WorkCentreCode { get; set; }
        public string AssetLocation { get; set; }
        public LogHeaderRunApiModel Run { get; set; }
        public LogHeaderWorkGroupApiModel WorkGroup { get; set; }
        public LogHeaderAssetTaskApiModel AssetTask { get; set; }
        public LogHeaderServiceAgreementApiModel ServiceAgreement { get; set; }
        public LogHeaderAssetApiModel Asset { get; set; }
        public List<StoredFilesApiModel> StoredFiles { get; set; }
        public List<LogHeaderDetailsApiModel> LogDetails { get; set; }
        public List<LogHeaderAnalysisTransactionApiModel> AnalysisTransactions { get; set; }
    }

    public class LogHeaderPersonApiModel
    {
        public int PersonID { get; set; }
        public string FullName { get; set; }
    }

    public class LogHeaderRunApiModel
    {
        public int RunID { get; set; }
        public string RunCode { get; set; }
        public string RunDescription { get; set; }
        public string RunDetails { get; set; }
        public int WorkGroupID { get; set; }
        public int DefaultPersonID { get; set; }
        public int Duration { get; set; }
        public string RunDay { get; set; }
        public string RouteCode { get; set; }
        public int Inactive { get; set; }
        public string ScheduleCode { get; set; }
        public string OutputCode { get; set; }
    }

    public class LogHeaderWorkGroupApiModel
    {
        public int WorkGroupID { get; set; }
        public string Description { get; set; }
    }

    public class LogHeaderAssetTaskApiModel
    {
        public int AssetTaskID { get; set; }
        public string AssetTaskDescription { get; set; }
        public string AssetTaskDetails { get; set; }
        public string ContractCode { get; set; }
        public string ScheduleCode { get; set; }
        public int AssetContractID { get; set; }
        public int TaskID { get; set; }
        public int WorkGroupID { get; set; }
        public int RunID { get; set; }
        public string RunCode { get; set; }
        public string FrequencyCode { get; set; }
        public int Recurring { get; set; }
        public string OutputCode { get; set; }
        public double OutputQuantity { get; set; }
        public int SequenceNumber { get; set; }
        public double BudgetTimeUnitsQuantity { get; set; }
        public string BudgetTimeUnit { get; set; }
        public int RunDayNumber { get; set; }
        public string RunDay { get; set; }
        public int Inactive { get; set; }
        public DateTime ScheduledStartDate { get; set; }
        public int UseExemptionDates { get; set; }
        public string AssetCode { get; set; }
        public int AssetID { get; set; }
        public int WorkOrderNo { get; set; }
        public int ServiceAgreementID { get; set; }
        public double ExpectedAnnualQuantity { get; set; }
        public string ServiceType { get; set; }
        public DateTime ScheduledEndDate { get; set; }
        public LogHeaderTaskApiModel Task { get; set; }
    }

    public class LogHeaderServiceAgreementApiModel
    {
        public int ID { get; set; }
        public string Code { get; set; }
        public string Description { get; set; }
        public string Details { get; set; }
        public string ClientSource { get; set; }
        public int CompanyID { get; set; }
        public string DefaultJobCode { get; set; }
        public string DefaultParentJobCode { get; set; }
        public int DefaultAgreement { get; set; }
        public string DefaultLogDescription { get; set; }
        public int DefaultAllocation { get; set; }
        public int DefaultDispatcherID { get; set; }
        public int Inactive { get; set; }
        public string JobTemplateCode { get; set; }
        public int DefaultReportID { get; set; }
        public string DefaultCity { get; set; }
        public string DefaultCountry { get; set; }
    }

    public class LogHeaderAssetApiModel
    {
        public int AssetID { get; set; }
        public string AssetCode { get; set; }
        public string ExternalCode { get; set; }
        public string Description { get; set; }
        public string JobCode { get; set; }
        public string ScheduleCode { get; set; }
        public double Quantity { get; set; }
        public string Unit { get; set; }
        public string Details { get; set; }
        public int Inactive { get; set; }
        public int CompanyID { get; set; }
        public int ParentAssetID { get; set; }
        public DateTime LastModifiedDateTime { get; set; }
        public string SourceReference { get; set; }
        public string AssetLocation { get; set; }
        public string StreetNo { get; set; }
        public string Street { get; set; }
        public string Suburb { get; set; }
        public string City { get; set; }
        public string Country { get; set; }
        public List<LogHeaderAssetAttributeValueApiModel> AssetAttributeValues { get; set; }
    }

    public class LogHeaderDetailsApiModel
    {
        public int LogDetailID { get; set; }
        public int LogHeaderID { get; set; }
        public DateTime DetailDate { get; set; }
        public DateTime DetailTime { get; set; }
        public string DetailType { get; set; }
        public int PersonID { get; set; }
        public string Comments { get; set; }
        public int TSCreated { get; set; }
        public DateTime TimesheetDate { get; set; }
        public string ActivityCode { get; set; }
        public double Hours { get; set; }
        public int JobTranID { get; set; }
        public string WorkCentreCode { get; set; }
        public string Reference { get; set; }
        public string ReferenceDescription { get; set; }
    }

    public class LogHeaderAnalysisTransactionApiModel
    {
        public int AnalysisTranID { get; set; }
        public int LogHeaderID { get; set; }
        public int AssetID { get; set; }
        public string TranReference { get; set; }
        public DateTime TranDate { get; set; }
        public string AnalysisGroupCode { get; set; }
        public string AnalysisCode { get; set; }
        public double Quantity { get; set; }
        public string TranStatus { get; set; }
        public string Details { get; set; }
        public int JobOutputID { get; set; }
        public int ExtraJobOutputID { get; set; }
        public bool UpdateFlag { get; set; }
    }

    public class LogHeaderTaskApiModel
    {
        public int TaskID { get; set; }
        public string TaskCode { get; set; }
        public string Description { get; set; }
        public string Details { get; set; }
        public string JobCode { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public int WorkDays { get; set; }
        public int TaskManagerID { get; set; }
        public int Inactive { get; set; }
        public int PercentCompleteOnSummary { get; set; }
        public string WorkCentreCode { get; set; }
        public string WorkCentreDesc { get; set; }
        public double BudgetHours { get; set; }
        public double ActualHours { get; set; }
        public double EstimateHours { get; set; }
        public double Completed { get; set; }
        public int MachineID { get; set; }
        public int SequenceNo { get; set; }
        public double ProductionQty { get; set; }
        public int ParentTaskID { get; set; }
        public string DefFrequencyCode { get; set; }
        public int DefRecurring { get; set; }
        public int WorkGroupID { get; set; }
        public int TaskTypeID { get; set; }
        public int TaskLag { get; set; }
        public int DefServiceAgreementID { get; set; }
    }

    public class LogHeaderAssetAttributeValueApiModel
    {
        public string DataLabel { get; set; }
        public int DataType { get; set; }
        public DateTime DateData { get; set; }
        public double NumericData { get; set; }
        public string TextDate { get; set; }
    }

    public class GridResult_ServiceDeskLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<ServiceDeskLine> rows { get; set; }
    }

    public class ServiceDeskLine
    {
        public CellData LogHeaderIdLink { get; set; }
        public string EscalationFlag { get; set; }
        public int LogHeaderId { get; set; }
        public CellData LogDate { get; set; }
        public string LogStatus { get; set; }
        public string Description { get; set; }
        public string LogPriorityDescription { get; set; }
        public string SchdDate { get; set; }
        public string LogByPerson { get; set; }
        public string JobCode { get; set; }
        public string JobDescription { get; set; }
        public string Client { get; set; }
        public CellData SchdDateOriginal { get; set; }
        public int Allocation { get; set; }
        public string FromTime { get; set; }
        public string JSON { get; set; }
        public string ActivityCode { get; set; }
        public string WorkCentreCode { get; set; }
        public DateTime CompletedDate { get; set; }
        public DateTime FinalDate { get; set; }
        public DateTime EventTimeStamp { get; set; }
        public DateTime UpdatedDate { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public ServiceDeskKey OriginalKey { get; set; }
        public ServiceDeskKey CurrentKey { get; set; }
        public ServiceDeskKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class ServiceDeskKey
    {
        public int LogHeaderId { get; set; }
    }

    public class LogApiModel
    {
        public TabletLogMaintenanceReportFields ReportFields { get; set; }
        public TabletLogMaintenanceKey Key { get; set; }
        public GridResult_TabletTimesheetLine TimesheetGrid { get; set; }
        public GridResult_TabletJobOutputsLine JobOutputsGrid { get; set; }
        public GridResult_TabletMaterialLine MaterialGrid { get; set; }
        public GridResult_TabletPlantLine PlantGrid { get; set; }
        public GridResult_WebEAVGridLine_WebEAVGridKey VerticalGrid { get; set; }
        public List<MvcValidationError> ValidationErrors { get; set; }
    }

    public class TabletLogMaintenanceReportFields
    {
        public StringViewData LogNo { get; set; }
        public PickerViewData AllocatedTo { get; set; }
        public DateViewData LogDate { get; set; }
        public TimeViewData LogTime { get; set; }
        public StringViewData OriginalLogDate { get; set; }
        public StringViewData Description { get; set; }
        public PickerViewData Client { get; set; }
        public StringViewData SiteContact { get; set; }
        public StringViewData ContactPhoneNo { get; set; }
        public StringViewData Address { get; set; }
        public StringViewData ContactDetail { get; set; }
        public PickerViewData JobCode { get; set; }
        public StringViewData Status { get; set; }
        public StringViewData Details { get; set; }
        public DateViewData ArrivedOnSiteDate { get; set; }
        public TimeViewData ArrivedOnSiteTime { get; set; }
        public DateViewData CompletedDate { get; set; }
        public TimeViewData CompletedTime { get; set; }
        public StringViewData CompletionDetails { get; set; }
        public DecimalViewData ExpectedHours { get; set; }
        public PickerViewData Priority { get; set; }
        public ExtensionFieldsViewData ExtensionFields { get; set; }
        public DecimalViewData RetailSummaryHours { get; set; }
        public DecimalViewData RetailSummaryLabour { get; set; }
        public DecimalViewData RetailSummaryMaterial { get; set; }
        public DecimalViewData RetailSummaryPlant { get; set; }
        public DecimalViewData RetailSummaryTotal { get; set; }
        public GridModel OutputSummary { get; set; }
    }

    public class GridResult_TabletTimesheetLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<TabletTimesheetLine> rows { get; set; }
    }

    public class GridResult_TabletJobOutputsLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<TabletJobOutputsLine> rows { get; set; }
    }

    public class GridResult_TabletMaterialLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<TabletMaterialLine> rows { get; set; }
    }

    public class GridResult_TabletPlantLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<TabletPlantLine> rows { get; set; }
    }

    public class GridResult_WebEAVGridLine_WebEAVGridKey
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<WebEAVGridLine_WebEAVGridKey> rows { get; set; }
    }

    public class TimeViewData
    {
        public string TimeValue { get; set; }
        public bool Is24H { get; set; }
        public string Name { get; set; }
        public bool Visible { get; set; }
        public bool Disabled { get; set; }
        public bool Required { get; set; }
        public string Placeholder { get; set; }
        public bool NoDirty { get; set; }
    }

    public class ExtensionFieldsViewData
    {
        public List<FieldViewData> Fields { get; set; }
        public object Form { get; set; }
        public bool Disabled { get; set; }
        public string Name { get; set; }
        public bool Visible { get; set; }
        public bool Required { get; set; }
        public string Placeholder { get; set; }
        public bool NoDirty { get; set; }
    }

    public class TabletTimesheetLine
    {
        public CellData Selected { get; set; }
        public CellData Person { get; set; }
        public DateTime DocketDate { get; set; }
        public string JobCode { get; set; }
        public CellData JobCodeLookup { get; set; }
        public CellData Action { get; set; }
        public CellData ActivityCode { get; set; }
        public CellData WorkCentreCode { get; set; }
        public CellData Allowance { get; set; }
        public string ActivityType { get; set; }
        public CellData StartTime { get; set; }
        public CellData EndTime { get; set; }
        public string TimeCode { get; set; }
        public CellData Quantity { get; set; }
        public string Details { get; set; }
        public CellData Delete { get; set; }
        public CellData OutputMeasure { get; set; }
        public string ActivitySubType { get; set; }
        public List<Tuple_String> TimeCodes { get; set; }
        public bool SubContractor { get; set; }
        public CellData PlantIssues { get; set; }
        public CellData DocketNo { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public TabletTimesheetDetailKey OriginalKey { get; set; }
        public TabletTimesheetDetailKey CurrentKey { get; set; }
        public TabletTimesheetDetailKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class TabletJobOutputsLine
    {
        public DateTime DocketDate { get; set; }
        public CellData JobCode { get; set; }
        public CellData ScheduleCode { get; set; }
        public CellData OutputCode { get; set; }
        public string Unit { get; set; }
        public CellData Rate { get; set; }
        public CellData Quantity { get; set; }
        public CellData Value { get; set; }
        public CellData Details { get; set; }
        public CellData Delete { get; set; }
        public CellData DocketNo { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public TabletJobOutputsKey OriginalKey { get; set; }
        public TabletJobOutputsKey CurrentKey { get; set; }
        public TabletJobOutputsKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class TabletMaterialLine
    {
        public DateTime DocketDate { get; set; }
        public CellData JobCode { get; set; }
        public CellData MaterialCode { get; set; }
        public string Supplier { get; set; }
        public CellData SupplierValue { get; set; }
        public string RateCode { get; set; }
        public CellData DocketNo { get; set; }
        public string ActivityCode { get; set; }
        public CellData ActivityCodeValue { get; set; }
        public CellData WorkCentreCode { get; set; }
        public CellData Description { get; set; }
        public CellData Quantity { get; set; }
        public string Unit { get; set; }
        public CellData Delete { get; set; }
        public CellData EnteredRate { get; set; }
        public CellData EnteredCost { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public TabletMaterialDetailKey OriginalKey { get; set; }
        public TabletMaterialDetailKey CurrentKey { get; set; }
        public TabletMaterialDetailKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class TabletPlantLine
    {
        public DateTime DocketDate { get; set; }
        public CellData JobCode { get; set; }
        public CellData PlantCodeExternal { get; set; }
        public CellData PlantCodeInternal { get; set; }
        public string TranType { get; set; }
        public string Supplier { get; set; }
        public CellData SupplierValue { get; set; }
        public string RateCode { get; set; }
        public CellData DocketNo { get; set; }
        public string ActivityCode { get; set; }
        public CellData ActivityCodeValue { get; set; }
        public CellData WorkCentreCode { get; set; }
        public CellData Description { get; set; }
        public CellData Comments { get; set; }
        public CellData Quantity { get; set; }
        public string Unit { get; set; }
        public CellData Delete { get; set; }
        public CellData CostRate { get; set; }
        public CellData EnteredRate { get; set; }
        public CellData EnteredCost { get; set; }
        public CellData ActivityCodeLookup { get; set; }
        public PickerViewData SupplierControl { get; set; }
        public PickerViewData RateCodeControl { get; set; }
        public PickerViewData ActivityCodeControl { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public TabletPlantDetailKey OriginalKey { get; set; }
        public TabletPlantDetailKey CurrentKey { get; set; }
        public TabletPlantDetailKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class WebEAVGridLine_WebEAVGridKey
    {
        public CellData WBNodeId { get; set; }
        public CellData Col00 { get; set; }
        public CellData Col01 { get; set; }
        public CellData Col02 { get; set; }
        public CellData Col03 { get; set; }
        public CellData Col04 { get; set; }
        public CellData Col05 { get; set; }
        public CellData Col06 { get; set; }
        public CellData Col07 { get; set; }
        public CellData Col08 { get; set; }
        public CellData Col09 { get; set; }
        public CellData Col10 { get; set; }
        public CellData Col11 { get; set; }
        public CellData Col12 { get; set; }
        public CellData Col13 { get; set; }
        public CellData Col14 { get; set; }
        public CellData Col15 { get; set; }
        public CellData Col16 { get; set; }
        public CellData Col17 { get; set; }
        public CellData Col18 { get; set; }
        public CellData Col19 { get; set; }
        public CellData Col20 { get; set; }
        public CellData Col21 { get; set; }
        public CellData Col22 { get; set; }
        public CellData Col23 { get; set; }
        public CellData Col24 { get; set; }
        public CellData Col25 { get; set; }
        public CellData Col26 { get; set; }
        public CellData Col27 { get; set; }
        public CellData Col28 { get; set; }
        public CellData Col29 { get; set; }
        public CellData RowId { get; set; }
        public CellData Delete { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public WebEAVGridKey OriginalKey { get; set; }
        public WebEAVGridKey CurrentKey { get; set; }
        public WebEAVGridKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class TabletTimesheetDetailKey
    {
        public int DocketId { get; set; }
        public int PersonId { get; set; }
        public string JobCode { get; set; }
        public string ActivityCode { get; set; }
        public string ActivityType { get; set; }
        public string ActivitySubType { get; set; }
        public string TimeCode { get; set; }
        public string WorkCentreCode { get; set; }
        public string PersonCode { get; set; }
        public int TimesheetGroupID { get; set; }
    }

    public class TabletJobOutputsKey
    {
        public int DocketId { get; set; }
        public string ScheduleCode { get; set; }
        public string OutputCode { get; set; }
        public string JobCode { get; set; }
    }

    public class TabletMaterialDetailKey
    {
        public int DocketId { get; set; }
        public int CatalogLineId { get; set; }
        public string MaterialCode { get; set; }
        public int CompanyId { get; set; }
        public string ActivityCode { get; set; }
        public int ItemId { get; set; }
        public string RateCode { get; set; }
        public string WorkCentreCode { get; set; }
        public string JobCode { get; set; }
        public string FormId { get; set; }
    }

    public class TabletPlantDetailKey
    {
        public int Idx { get; set; }
        public int PersonId { get; set; }
        public int DocketId { get; set; }
        public int CatalogLineId { get; set; }
        public string PlantCode { get; set; }
        public int CompanyId { get; set; }
        public string ActivityCode { get; set; }
        public int ItemId { get; set; }
        public string RateCode { get; set; }
        public string WorkCentreCode { get; set; }
        public bool HasOtherTimesheetGroup { get; set; }
        public string TranType { get; set; }
        public string JobCode { get; set; }
        public string FormId { get; set; }
    }

    public class WebEAVGridKey
    {
        public string WBClassCode { get; set; }
        public int WBClassId { get; set; }
        public int WBNodeId { get; set; }
    }

    public class NewLogServiceAgreementApiKey
    {
        public int ServiceAgreementID { get; set; }
        public string ServiceAgreementCode { get; set; }
        public string OrderNo { get; set; }
    }

    public class LogServiceAgreementApiKey
    {
        public int ServiceAgreementID { get; set; }
        public string ServiceAgreementCode { get; set; }
        public string OrderNo { get; set; }
        public int LogHeaderID { get; set; }
    }

    public class PeopleApiModel
    {
        public GeneralPersonKey Key { get; set; }
        public GeneralPersonMainFields Main { get; set; }
        public PeopleApiGridLines_GeneralAttributeLine Attributes { get; set; }
        public PeopleApiGridLines_GeneralNoteLine Notes { get; set; }
        public PeopleApiGridLines_GeneralToDoLine ToDoItems { get; set; }
    }

    public class GeneralPersonMainFields
    {
        public StringViewData Surname { get; set; }
        public StringViewData FirstName { get; set; }
        public StringViewData FullName { get; set; }
        public StringViewData PersonIdNum { get; set; }
        public StringViewData Title { get; set; }
        public PickerViewData Company { get; set; }
        public StringViewData JobTitle { get; set; }
        public StringViewData Salutation { get; set; }
        public StringViewData EmailAddress { get; set; }
        public StringViewData EmailAddress2 { get; set; }
        public StringViewData MobilePhone { get; set; }
        public StringViewData BusinessPhone { get; set; }
        public StringViewData CompanyPhone { get; set; }
        public StringViewData HomePhone { get; set; }
        public StringViewData Fax { get; set; }
        public StringViewData PersonReference { get; set; }
        public StringViewData PersonalAddress { get; set; }
        public BoolViewData BillingContact { get; set; }
        public BoolViewData SiteContact { get; set; }
        public BoolViewData Inactive { get; set; }
    }

    public class PeopleApiGridLines_GeneralAttributeLine
    {
        public List<GeneralAttributeLine> Rows { get; set; }
    }

    public class PeopleApiGridLines_GeneralNoteLine
    {
        public List<GeneralNoteLine> Rows { get; set; }
    }

    public class PeopleApiGridLines_GeneralToDoLine
    {
        public List<GeneralToDoLine> Rows { get; set; }
    }

    public class GridResult_GeneralPersonLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<GeneralPersonLine> rows { get; set; }
    }

    public class GridResult_PlantPlantItemLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<PlantPlantItemLine> rows { get; set; }
    }

    public class PlantPlantItemLine
    {
        public string Code { get; set; }
        public string Description { get; set; }
        public string CodeDescription { get; set; }
        public string Activity { get; set; }
        public int GroupId { get; set; }
        public string Group { get; set; }
        public string Location { get; set; }
        public string ProfitCentre { get; set; }
        public int ProfitCentreGroupId { get; set; }
        public int LocationManagerId { get; set; }
        public string Registration { get; set; }
        public int DriverId { get; set; }
        public string Driver { get; set; }
        public string Class { get; set; }
        public string SerialNo { get; set; }
        public bool Inactive { get; set; }
        public CellData Select { get; set; }
        public CellData CodeValue { get; set; }
        public CellData DescriptionValue { get; set; }
        public CellData GroupValue { get; set; }
        public CellData LocationValue { get; set; }
        public CellData ProfitCentreValue { get; set; }
        public CellData RegistrationValue { get; set; }
        public CellData DriverValue { get; set; }
        public CellData ClassValue { get; set; }
        public CellData SerialNoValue { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public PlantPlantItemKey OriginalKey { get; set; }
        public PlantPlantItemKey CurrentKey { get; set; }
        public PlantPlantItemKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class PlantPlantItemKey
    {
        public int ItemId { get; set; }
    }

    public class GridResult_LookupsPlantLineModel
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<LookupsPlantLineModel> rows { get; set; }
    }

    public class LookupsPlantLineModel
    {
        public int ItemId { get; set; }
        public CellData Code { get; set; }
        public string Description { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public LookupsLookupKey OriginalKey { get; set; }
        public LookupsLookupKey CurrentKey { get; set; }
        public LookupsLookupKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class PurchaseOrdersDetailKey
    {
        public int PurchaseOrderLineId { get; set; }
        public int PurchaserId { get; set; }
        public string FinCoCode { get; set; }
        public string JobCode { get; set; }
        public int LineCode { get; set; }
        public string ActivityCode { get; set; }
        public string WorkCentreCode { get; set; }
        public string GstTypeCode { get; set; }
    }

    public class PurchaseOrdersDetailLine
    {
        public CellData JobCode { get; set; }
        public CellData LineCode { get; set; }
        public CellData ActivityCode { get; set; }
        public CellData LineDescription { get; set; }
        public CellData Details { get; set; }
        public CellData WorkCentreCode { get; set; }
        public CellData Unit { get; set; }
        public CellData Reference { get; set; }
        public CellData FCUnitCost { get; set; }
        public CellData OrderQuantity { get; set; }
        public CellData FCOrderCost { get; set; }
        public CellData OutstandingQuantity { get; set; }
        public CellData FCOutstandingCost { get; set; }
        public CellData Gst { get; set; }
        public CellData GstRate { get; set; }
        public CellData GstTypeCode { get; set; }
        public CellData Delete { get; set; }
        public CellData LineDetails { get; set; }
        public DateTime RequiredDate { get; set; }
        public DateTime FollowUpDate { get; set; }
        public DateTime ExpectedDate { get; set; }
        public bool Complete { get; set; }
        public CellData Completed { get; set; }
        public bool CheckboxDisabled { get; set; }
        public string CheckboxDisabledLabel { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public PurchaseOrdersDetailKey OriginalKey { get; set; }
        public PurchaseOrdersDetailKey CurrentKey { get; set; }
        public PurchaseOrdersDetailKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class PurchaseOrdersKey
    {
        public int PONumber { get; set; }
    }

    public class PurchaseOrderApiModel
    {
        public PurchaseOrdersKey Key { get; set; }
        public PurchaseOrdersPurchaseOrderFields PurchaseOrderFields { get; set; }
        public List<PurchaseOrdersDetailLine> Rows { get; set; }
        public List<MvcValidationError> ValidationErrors { get; set; }
    }

    public class PurchaseOrdersPurchaseOrderFields
    {
        public SplitButtonViewData PrintButton { get; set; }
        public FileAttachmentsViewData AttachmentsDialog { get; set; }
        public StringViewData PONumber { get; set; }
        public PickerViewData Location { get; set; }
        public PickerViewData ProfitCentre { get; set; }
        public PickerViewData Supplier { get; set; }
        public PickerViewData Contact { get; set; }
        public StringViewData EnteredBy { get; set; }
        public PickerViewData Purchaser { get; set; }
        public PickerViewData Approver { get; set; }
        public StringViewData POReference { get; set; }
        public DateViewData PODate { get; set; }
        public BoolViewData StandingPO { get; set; }
        public DropdownViewData Currency { get; set; }
        public DecimalViewData FCRate { get; set; }
        public PickerViewData POReason { get; set; }
        public PickerViewData POType { get; set; }
        public PickerViewData Job { get; set; }
        public PickerViewData Address { get; set; }
        public StringViewData DeliveryAddress { get; set; }
        public DateViewData RequiredDate { get; set; }
        public DateViewData FollowUpDate { get; set; }
        public DateViewData ExpectedDate { get; set; }
        public DateViewData RevisedDate { get; set; }
        public StringViewData Comments { get; set; }
        public BoolViewData CompletedField { get; set; }
        public bool Approved { get; set; }
        public bool Completed { get; set; }
        public bool CanApprove { get; set; }
        public bool CanUnapprove { get; set; }
        public ControlButtonsViewData ControlButtons { get; set; }
        public ButtonViewData Import { get; set; }
    }

    public class ControlButtonsViewData
    {
    }

    public class GridResult_PurchaseOrdersListItem
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<PurchaseOrdersListItem> rows { get; set; }
    }

    public class PurchaseOrdersListItem
    {
        public CellData PONumber { get; set; }
        public string PODate { get; set; }
        public int SupplierId { get; set; }
        public string SupplierName { get; set; }
        public int PurchaserId { get; set; }
        public string PurchaserName { get; set; }
        public string Reference { get; set; }
        public bool Completed { get; set; }
        public bool Approved { get; set; }
        public string Currency { get; set; }
        public string POType { get; set; }
        public double OriginalValue { get; set; }
        public double OutstandingValue { get; set; }
        public DateTime UpdatedDate { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public PurchaseOrdersKey OriginalKey { get; set; }
        public PurchaseOrdersKey CurrentKey { get; set; }
        public PurchaseOrdersKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class QuotesQuoteKey
    {
        public int QuoteID { get; set; }
        public string QuoteNo { get; set; }
        public string CurrencyCode { get; set; }
        public int ClientId { get; set; }
        public bool IsNew { get; set; }
    }

    public class QuoteApiModel
    {
        public QuotesQuoteKey Key { get; set; }
        public QuotesQuoteDetailMainFields QuoteDetailMainFields { get; set; }
        public List<MvcValidationError> ValidationErrors { get; set; }
    }

    public class QuotesQuoteDetailMainFields
    {
        public StringViewData QuoteCode { get; set; }
        public DecimalViewData VersionNo { get; set; }
        public StringViewData Description { get; set; }
        public PickerViewData Job { get; set; }
        public PickerViewData QuoteStatus { get; set; }
        public PickerViewData PriceCode { get; set; }
        public PickerViewData ActivityGroup { get; set; }
        public PickerViewData ProfitCentre { get; set; }
        public PickerViewData Client { get; set; }
        public PickerViewData ClientContact { get; set; }
        public StringViewData ClientOrderNo { get; set; }
        public StringViewData ProspectClient { get; set; }
        public StringViewData ProspectContact { get; set; }
        public StringViewData CreditStatus { get; set; }
        public StringViewData QuoteDetails { get; set; }
        public DateViewData CreatedDate { get; set; }
        public DateViewData ExpiryDate { get; set; }
        public DateViewData AcceptedDate { get; set; }
        public PickerViewData Currency { get; set; }
        public DecimalViewData FCRate { get; set; }
        public PickerViewData QuotedBy { get; set; }
        public PickerViewData ApprovedBy { get; set; }
        public DecimalViewData CostSheetSell { get; set; }
        public DecimalViewData QuoteSellAdjustment { get; set; }
        public DecimalViewData QuoteSelling { get; set; }
        public DecimalViewData Margin { get; set; }
        public PercentageViewData MarginPercentage { get; set; }
        public DecimalViewData QuoteCost { get; set; }
        public PickerViewData FailCode { get; set; }
        public StringViewData FailReason { get; set; }
        public PercentageViewData PercentChance { get; set; }
        public string BudgetUrl { get; set; }
        public string OutputsUrl { get; set; }
        public string ClaimUrl { get; set; }
        public bool CanPrint { get; set; }
        public bool CanApprove { get; set; }
        public bool CanUnapprove { get; set; }
        public StandardTextViewData QuoteReportText { get; set; }
    }

    public class PercentageViewData
    {
        public double DecimalValue { get; set; }
        public double MinValue { get; set; }
        public double MaxValue { get; set; }
        public double Step { get; set; }
        public bool RightAlign { get; set; }
        public int DecimalPlaces { get; set; }
        public bool HideSpinner { get; set; }
        public string Name { get; set; }
        public bool Visible { get; set; }
        public bool Disabled { get; set; }
        public bool Required { get; set; }
        public bool DisableChange { get; set; }
        public bool NoDirty { get; set; }
        public ControlSizeValues ControlSize { get; set; }
        public FontStyleValues FontStyle { get; set; }
        public enum ControlSizeValues
        {
            None,
            Small,
        }

        public enum FontStyleValues
        {
            None,
            Bold,
            Italic,
        }

    }

    public class QuoteLineLabourSellingRateKey
    {
        public string PriceCode { get; set; }
        public string ActivityCode { get; set; }
        public string EmployeeClassCode { get; set; }
        public int PersonId { get; set; }
    }

    public class QuoteLineSellingRateModel
    {
        public double SellingRate { get; set; }
    }

    public class QuoteLineMaterialSellingRateKey
    {
        public string PriceCode { get; set; }
        public string LineType { get; set; }
        public int ItemId { get; set; }
        public int CatalogueLineId { get; set; }
        public string ActivityCode { get; set; }
        public string RateCode { get; set; }
    }

    public class QuoteLinePlantSellingRateKey
    {
        public string PriceCode { get; set; }
        public int ItemId { get; set; }
        public string ActivityCode { get; set; }
        public string RateCode { get; set; }
    }

    public class GridResult_QuotesListLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<QuotesListLine> rows { get; set; }
    }

    public class QuotesListLine
    {
        public bool IsTemplate { get; set; }
        public string Description { get; set; }
        public string ProfitCentreCode { get; set; }
        public int QuoteID { get; set; }
        public string QuoteCode { get; set; }
        public int CompanyID { get; set; }
        public string JobCode { get; set; }
        public int QuotedByID { get; set; }
        public bool IsAccepted { get; set; }
        public DateTime CreatedDate { get; set; }
        public DateTime SentDate { get; set; }
        public DateTime ExpiryDate { get; set; }
        public DateTime AcceptedDate { get; set; }
        public DateTime ClosedDate { get; set; }
        public CellData Select { get; set; }
        public CellData QuoteNumberValue { get; set; }
        public CellData DescriptionValue { get; set; }
        public CellData CompanyValue { get; set; }
        public CellData QuoteStatus { get; set; }
        public CellData CostValue { get; set; }
        public CellData ContractValue { get; set; }
        public CellData MarginValue { get; set; }
        public CellData MarginPercent { get; set; }
        public CellData QuotedBy { get; set; }
        public CellData ProfitCentre { get; set; }
        public CellData Details { get; set; }
        public CellData FailCodeValue { get; set; }
        public CellData FailReasonValue { get; set; }
        public CellData PercentChanceValue { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public QuotesQuoteKey OriginalKey { get; set; }
        public QuotesQuoteKey CurrentKey { get; set; }
        public QuotesQuoteKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class ScaffoldTableDataKey
    {
        public string StringId { get; set; }
        public int IntId { get; set; }
        public DateTime DateId { get; set; }
        public string StringId1 { get; set; }
        public int IntId1 { get; set; }
        public DateTime DateId1 { get; set; }
        public string Name { get; set; }
        public string KeyName { get; set; }
        public string KeyName1 { get; set; }
        public bool SortDesc { get; set; }
    }

    public class ScaffoldTableDataLine
    {
        public CellData Col01 { get; set; }
        public CellData Col02 { get; set; }
        public CellData Col03 { get; set; }
        public CellData Col04 { get; set; }
        public CellData Col05 { get; set; }
        public CellData Col06 { get; set; }
        public CellData Col07 { get; set; }
        public CellData Col08 { get; set; }
        public CellData Col09 { get; set; }
        public CellData Col10 { get; set; }
        public CellData Col11 { get; set; }
        public CellData Col12 { get; set; }
        public CellData Col13 { get; set; }
        public CellData Col14 { get; set; }
        public CellData Col15 { get; set; }
        public CellData Col16 { get; set; }
        public CellData Col17 { get; set; }
        public CellData Col18 { get; set; }
        public CellData Col19 { get; set; }
        public CellData Col20 { get; set; }
        public CellData Col21 { get; set; }
        public CellData Col22 { get; set; }
        public CellData Col23 { get; set; }
        public CellData Col24 { get; set; }
        public CellData Col25 { get; set; }
        public CellData Col26 { get; set; }
        public CellData Col27 { get; set; }
        public CellData Col28 { get; set; }
        public CellData Col29 { get; set; }
        public CellData Col30 { get; set; }
        public CellData Col31 { get; set; }
        public CellData Col32 { get; set; }
        public CellData Col33 { get; set; }
        public CellData Col34 { get; set; }
        public CellData Col35 { get; set; }
        public CellData Col36 { get; set; }
        public CellData Col37 { get; set; }
        public CellData Col38 { get; set; }
        public CellData Col39 { get; set; }
        public CellData Col40 { get; set; }
        public CellData Col41 { get; set; }
        public CellData Col42 { get; set; }
        public CellData Col43 { get; set; }
        public CellData Col44 { get; set; }
        public CellData Col45 { get; set; }
        public CellData Col46 { get; set; }
        public CellData Col47 { get; set; }
        public CellData Col48 { get; set; }
        public CellData Col49 { get; set; }
        public CellData Col50 { get; set; }
        public CellData Col51 { get; set; }
        public CellData Col52 { get; set; }
        public CellData Col53 { get; set; }
        public CellData Col54 { get; set; }
        public CellData Col55 { get; set; }
        public CellData Col56 { get; set; }
        public CellData Col57 { get; set; }
        public CellData Col58 { get; set; }
        public CellData Col59 { get; set; }
        public CellData Col60 { get; set; }
        public CellData Col61 { get; set; }
        public CellData Col62 { get; set; }
        public CellData Col63 { get; set; }
        public CellData Col64 { get; set; }
        public CellData Col65 { get; set; }
        public CellData Col66 { get; set; }
        public CellData Col67 { get; set; }
        public CellData Col68 { get; set; }
        public CellData Col69 { get; set; }
        public CellData Col70 { get; set; }
        public CellData Col71 { get; set; }
        public CellData Col72 { get; set; }
        public CellData Col73 { get; set; }
        public CellData Col74 { get; set; }
        public CellData Col75 { get; set; }
        public CellData Col76 { get; set; }
        public CellData Col77 { get; set; }
        public CellData Col78 { get; set; }
        public CellData Col79 { get; set; }
        public CellData Col80 { get; set; }
        public CellData Col81 { get; set; }
        public CellData Col82 { get; set; }
        public CellData Col83 { get; set; }
        public CellData Col84 { get; set; }
        public CellData Col85 { get; set; }
        public CellData Col86 { get; set; }
        public CellData Col87 { get; set; }
        public CellData Col88 { get; set; }
        public CellData Col89 { get; set; }
        public CellData Col90 { get; set; }
        public CellData Col91 { get; set; }
        public CellData Col92 { get; set; }
        public CellData Col93 { get; set; }
        public CellData Col94 { get; set; }
        public CellData Col95 { get; set; }
        public CellData Col96 { get; set; }
        public CellData Col97 { get; set; }
        public CellData Col98 { get; set; }
        public CellData Col99 { get; set; }
        public CellData Col100 { get; set; }
        public CellData Col101 { get; set; }
        public CellData Col102 { get; set; }
        public CellData Col103 { get; set; }
        public CellData Col104 { get; set; }
        public CellData Col105 { get; set; }
        public CellData Col106 { get; set; }
        public CellData Col107 { get; set; }
        public CellData Col108 { get; set; }
        public CellData Col109 { get; set; }
        public CellData Col110 { get; set; }
        public CellData Col111 { get; set; }
        public CellData Col112 { get; set; }
        public CellData Col113 { get; set; }
        public CellData Col114 { get; set; }
        public CellData Col115 { get; set; }
        public CellData Col116 { get; set; }
        public CellData Col117 { get; set; }
        public CellData Col118 { get; set; }
        public CellData Col119 { get; set; }
        public CellData Col120 { get; set; }
        public CellData Col121 { get; set; }
        public CellData Col122 { get; set; }
        public CellData Col123 { get; set; }
        public CellData Col124 { get; set; }
        public CellData Col125 { get; set; }
        public CellData Col126 { get; set; }
        public CellData Col127 { get; set; }
        public CellData Col128 { get; set; }
        public CellData Col129 { get; set; }
        public CellData Col130 { get; set; }
        public CellData Col131 { get; set; }
        public CellData Col132 { get; set; }
        public CellData Col133 { get; set; }
        public CellData Col134 { get; set; }
        public CellData Col135 { get; set; }
        public CellData Col136 { get; set; }
        public CellData Col137 { get; set; }
        public CellData Col138 { get; set; }
        public CellData Col139 { get; set; }
        public CellData Col140 { get; set; }
        public CellData Col141 { get; set; }
        public CellData Col142 { get; set; }
        public CellData Col143 { get; set; }
        public CellData Col144 { get; set; }
        public CellData Col145 { get; set; }
        public CellData Col146 { get; set; }
        public CellData Col147 { get; set; }
        public CellData Col148 { get; set; }
        public CellData Col149 { get; set; }
        public CellData Col150 { get; set; }
        public CellData Delete { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public ScaffoldTableDataKey OriginalKey { get; set; }
        public ScaffoldTableDataKey CurrentKey { get; set; }
        public ScaffoldTableDataKey Key { get; set; }
        public int Index { get; set; }
    }

    public class GridResult_ScaffoldTableDataLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<ScaffoldTableDataLine> rows { get; set; }
    }

    public class ScaffoldTableDataLite
    {
        public string Name01 { get; set; }
        public string Value01 { get; set; }
        public string Name02 { get; set; }
        public string Value02 { get; set; }
        public string Name03 { get; set; }
        public string Value03 { get; set; }
        public string Name04 { get; set; }
        public string Value04 { get; set; }
        public string Name05 { get; set; }
        public string Value05 { get; set; }
        public string Name06 { get; set; }
        public string Value06 { get; set; }
        public string Name07 { get; set; }
        public string Value07 { get; set; }
        public string Name08 { get; set; }
        public string Value08 { get; set; }
        public string Name09 { get; set; }
        public string Value09 { get; set; }
        public string Name10 { get; set; }
        public string Value10 { get; set; }
        public ScaffoldTableDataKey Key { get; set; }
    }

    public class SiteMapProfileApiModel
    {
        public int SiteMapProfileID { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public List<SiteMapApiModel> SiteMaps { get; set; }
    }

    public class SiteMapApiModel
    {
        public int SiteMapID { get; set; }
        public int ParentSiteMapID { get; set; }
        public string Name { get; set; }
        public string Controller { get; set; }
        public string Action { get; set; }
        public string Area { get; set; }
    }

    public class Web_Lib_FileUpload_StoredFilesApiModel
    {
        public StoredFilesApiModel Value { get; set; }
        public string FileName { get; set; }
        public string MediaType { get; set; }
        public byte Buffer { get; set; }
    }

    public class SubContractClaimApiKey
    {
        public int PersonId { get; set; }
        public string Url { get; set; }
        public string SubContractCode { get; set; }
        public int ApInvoiceId { get; set; }
        public string DialogId { get; set; }
        public string GridId { get; set; }
    }

    public class SubContractsSubContractClaimSaveResult
    {
        public object tabForm { get; set; }
        public object mainGrid { get; set; }
        public object claimableGrid { get; set; }
        public string successMessage { get; set; }
        public string warningMessage { get; set; }
        public string errorMessage { get; set; }
        public List<MvcValidationError> validationErrors { get; set; }
        public object form { get; set; }
        public object grid { get; set; }
        public string KeyStr { get; set; }
        public DateTime KeyDate { get; set; }
        public int KeyInt { get; set; }
    }

    public class SubContractsSubContractClaimKey
    {
        public string SubContractCode { get; set; }
        public int APInvoiceID { get; set; }
        public string JobCode { get; set; }
        public int SubContractCompID { get; set; }
    }

    public class SubContractClaimApiModel
    {
        public SubContractsSubContractClaimKey Key { get; set; }
        public SubContractClaimApiFields SubContractClaimFields { get; set; }
        public SubContractDetailsApiFields SubContractDetailsFields { get; set; }
        public GridResult_SubContractsSubContractWorkOrderEntryLine SubContractWorkOrderEntries { get; set; }
    }

    public class SubContractClaimApiFields
    {
        public SubContractsSubContractClaimKey Key { get; set; }
        public StringViewData SubContractCode { get; set; }
        public StringViewData JobCode { get; set; }
        public StringViewData CompanyID { get; set; }
        public StringViewData InvoiceNumber { get; set; }
        public DecimalViewData SubContractClaimNo { get; set; }
        public StringViewData Details { get; set; }
        public BoolViewData FinalClaim { get; set; }
        public BoolViewData OnHold { get; set; }
        public DateViewData InvoiceDate { get; set; }
        public DateViewData PaymentDate { get; set; }
        public DateViewData ReceivedDate { get; set; }
        public DateViewData ApprovedDate { get; set; }
        public DropdownViewData CurrencyCode { get; set; }
        public DropdownViewData FCFixed { get; set; }
        public DecimalViewData FCConversionRate { get; set; }
        public PickerViewData ApprovedBy { get; set; }
        public DecimalViewData VoucherID { get; set; }
        public DropdownViewData RetentionType { get; set; }
        public PickerViewData ApprovalRequiredBy { get; set; }
        public BoolViewData ApprovalNotify { get; set; }
    }

    public class SubContractDetailsApiFields
    {
        public DropdownViewData Status { get; set; }
    }

    public class GridResult_SubContractsSubContractWorkOrderEntryLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<SubContractsSubContractWorkOrderEntryLine> rows { get; set; }
    }

    public class SubContractsSubContractWorkOrderEntryLine
    {
        public int LineStatusID { get; set; }
        public int SequenceNo { get; set; }
        public string LineReference { get; set; }
        public string State { get; set; }
        public string Job { get; set; }
        public string WorkCentreCode { get; set; }
        public string ActivityCode { get; set; }
        public string LineDescription { get; set; }
        public double OrderQuantity { get; set; }
        public double OrderCost { get; set; }
        public CellData ClaimedQty { get; set; }
        public CellData ClaimedValue { get; set; }
        public CellData CertifiedToDateQuantity { get; set; }
        public CellData CertifiedToDateValue { get; set; }
        public double PreviouslyCertifiedQuantity { get; set; }
        public double PreviouslyCertifiedValue { get; set; }
        public double CertifiedThisClaimQuantity { get; set; }
        public double CertifiedThisClaimValue { get; set; }
        public double UnapprovedQuantity { get; set; }
        public double UnapprovedValue { get; set; }
        public CellData UnapprovedReason { get; set; }
        public CellData InternalNotes { get; set; }
        public CellData DeclineValue { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public SubContractsSubContractWorkOrderKey OriginalKey { get; set; }
        public SubContractsSubContractWorkOrderKey CurrentKey { get; set; }
        public SubContractsSubContractWorkOrderKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class SubContractsSubContractWorkOrderKey
    {
        public string Changed { get; set; }
        public string WOType { get; set; }
        public string JobCode { get; set; }
        public int WONumber { get; set; }
        public int PurchaseOrderLineID { get; set; }
    }

    public class SubContractsSubContractClaimEntryKey
    {
        public string SubContractCode { get; set; }
        public int ApInvoiceId { get; set; }
    }

    public class SubContractClaimEntryApiModel
    {
        public SubContractsSubContractClaimEntryKey Key { get; set; }
        public SubContractClaimApiMainFields MainFields { get; set; }
        public SubContractClaimApiClaimableFields ClaimableFields { get; set; }
    }

    public class SubContractClaimApiMainFields
    {
        public StringViewData SubContract { get; set; }
        public StringViewData Job { get; set; }
        public StringViewData Contractor { get; set; }
        public StringViewData ClaimNo { get; set; }
        public StringViewData Reference { get; set; }
        public StringViewData Details { get; set; }
        public DropdownViewData Status { get; set; }
        public BoolViewData FinalClaim { get; set; }
        public DateViewData ClaimDate { get; set; }
        public DateViewData ReceivedDate { get; set; }
        public DateViewData CertificationDue { get; set; }
        public DateViewData PaymentDue { get; set; }
        public DateViewData Approved { get; set; }
        public StringViewData Currency { get; set; }
        public DecimalViewData Rate { get; set; }
        public DropdownViewData AssignedApprover { get; set; }
        public DropdownViewData ApprovedBy { get; set; }
        public List<string> Approvers { get; set; }
        public DateViewData PaymentDate { get; set; }
        public GridResult_SubContractsClaimLine Rows { get; set; }
    }

    public class SubContractClaimApiClaimableFields
    {
        public GridResult_SubContractsClaimableLine Rows { get; set; }
    }

    public class GridResult_SubContractsClaimLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<SubContractsClaimLine> rows { get; set; }
    }

    public class GridResult_SubContractsClaimableLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<SubContractsClaimableLine> rows { get; set; }
    }

    public class SubContractsClaimLine
    {
        public string Job { get; set; }
        public int WorkOrder { get; set; }
        public string WorkCentre { get; set; }
        public string Activity { get; set; }
        public string Details { get; set; }
        public double Commitment { get; set; }
        public double ClaimToDate { get; set; }
        public double CertifiedToDate { get; set; }
        public double PreviouslyCertified { get; set; }
        public double ThisCertificate { get; set; }
        public CellData JobValue { get; set; }
        public CellData WorkOrderValue { get; set; }
        public CellData WorkCentreValue { get; set; }
        public CellData ActivityValue { get; set; }
        public CellData DetailsValue { get; set; }
        public CellData CommitmentValue { get; set; }
        public CellData ClaimToDateValue { get; set; }
        public CellData CertifiedToDateValue { get; set; }
        public CellData PreviouslyCertifiedValue { get; set; }
        public CellData ThisCertificateValue { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public SubContractsClaimKey OriginalKey { get; set; }
        public SubContractsClaimKey CurrentKey { get; set; }
        public SubContractsClaimKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class SubContractsClaimableLine
    {
        public string Type { get; set; }
        public DateTime WorkOrderDate { get; set; }
        public int WorkOrder { get; set; }
        public string Line { get; set; }
        public string Details { get; set; }
        public string State { get; set; }
        public string Unit { get; set; }
        public string Job { get; set; }
        public string WorkCentre { get; set; }
        public string Activity { get; set; }
        public double CommitmentQuantity { get; set; }
        public double Commitment { get; set; }
        public double ClaimToDatePercentage { get; set; }
        public double ClaimToDateQuantity { get; set; }
        public double ClaimToDate { get; set; }
        public double ThisClaim { get; set; }
        public double CertifiedToDateQuantity { get; set; }
        public double CertifiedToDate { get; set; }
        public bool DefaultToCertified { get; set; }
        public bool DefaultToClaimed { get; set; }
        public bool Full { get; set; }
        public bool ToDo { get; set; }
        public bool Decline { get; set; }
        public double ThisCertificate { get; set; }
        public double UnapprovedQuantity { get; set; }
        public double Unapproved { get; set; }
        public bool Completed { get; set; }
        public string UnapprovedReason { get; set; }
        public string Comment { get; set; }
        public double PreviouslyClaimedQuantity { get; set; }
        public double PreviouslyClaimed { get; set; }
        public double PreviouslyCertifiedQuantity { get; set; }
        public double PreviouslyCertified { get; set; }
        public CellData TypeValue { get; set; }
        public CellData WorkOrderDateValue { get; set; }
        public CellData WorkOrderValue { get; set; }
        public CellData LineValue { get; set; }
        public CellData DetailsValue { get; set; }
        public CellData StateValue { get; set; }
        public CellData UnitValue { get; set; }
        public CellData JobValue { get; set; }
        public CellData WorkCentreValue { get; set; }
        public CellData ActivityValue { get; set; }
        public CellData CommitmentQuantityValue { get; set; }
        public CellData CommitmentValue { get; set; }
        public CellData DefaultToCertifiedValue { get; set; }
        public CellData DefaultToClaimedValue { get; set; }
        public CellData ClaimToDatePercentageValue { get; set; }
        public CellData ClaimToDateQuantityValue { get; set; }
        public CellData ClaimToDateValue { get; set; }
        public CellData ThisClaimValue { get; set; }
        public CellData ThisCertificateValue { get; set; }
        public CellData CertifiedToDateQuantityValue { get; set; }
        public CellData CertifiedToDateValue { get; set; }
        public CellData FullValue { get; set; }
        public CellData ToDoValue { get; set; }
        public CellData DeclineValue { get; set; }
        public CellData CommentValue { get; set; }
        public CellData UnapprovedQuantityValue { get; set; }
        public CellData UnapprovedValue { get; set; }
        public CellData UnapprovedReasonValue { get; set; }
        public CellData PreviouslyClaimedQuantityValue { get; set; }
        public CellData PreviouslyClaimedValue { get; set; }
        public CellData PreviouslyCertifiedQuantityValue { get; set; }
        public CellData PreviouslyCertifiedValue { get; set; }
        public bool Declined { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public SubContractsClaimableKey OriginalKey { get; set; }
        public SubContractsClaimableKey CurrentKey { get; set; }
        public SubContractsClaimableKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class SubContractsClaimKey
    {
        public int PurchaseOrderLineId { get; set; }
        public int JobTranId { get; set; }
        public string Type { get; set; }
    }

    public class SubContractsClaimableKey
    {
        public string Type { get; set; }
        public int WorkOrder { get; set; }
        public int PurchaseOrderLineId { get; set; }
    }

    public class GridResult_SubContractsSubContractClaimLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<SubContractsSubContractClaimLine> rows { get; set; }
    }

    public class SubContractsSubContractClaimLine
    {
        public CellData No { get; set; }
        public CellData InvoiceNo { get; set; }
        public DateTime Date { get; set; }
        public CellData Batched { get; set; }
        public CellData BatchNo { get; set; }
        public CellData SubClaimedThisClaim { get; set; }
        public CellData SubClaimedToDate { get; set; }
        public CellData CertifiedToDate { get; set; }
        public CellData CertifiedThisClaim { get; set; }
        public CellData Retentions { get; set; }
        public CellData NetCertified { get; set; }
        public CellData GST { get; set; }
        public CellData GrossCertified { get; set; }
        public CellData Notes { get; set; }
        public CellData ApprovalRequiredBy { get; set; }
        public CellData ApprovedBy { get; set; }
        public CellData VoucherValue { get; set; }
        public CellData PaidTotal { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public SubContractsSubContractClaimKey OriginalKey { get; set; }
        public SubContractsSubContractClaimKey CurrentKey { get; set; }
        public SubContractsSubContractClaimKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class GridResult_SubContractsSubContractLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<SubContractsSubContractLine> rows { get; set; }
    }

    public class SubContractsSubContractLine
    {
        public CellData SubContractCode { get; set; }
        public string SubContractCodeVal { get; set; }
        public string JobCode { get; set; }
        public string Description { get; set; }
        public string Subcontractor { get; set; }
        public int SubContractCompID { get; set; }
        public string Location { get; set; }
        public string SubContractStatus { get; set; }
        public string Currency { get; set; }
        public string RetentionCode { get; set; }
        public string ContractType { get; set; }
        public string ContractTermCode { get; set; }
        public bool BriefConfirmed { get; set; }
        public string ContractFile { get; set; }
        public CellData PercentCompleteTime { get; set; }
        public CellData PercentCompleteValue { get; set; }
        public CellData ExpectedContractValue { get; set; }
        public CellData CurrentContractValue { get; set; }
        public CellData FCExpectedContractValue { get; set; }
        public CellData FCCurrentContractValue { get; set; }
        public CellData NetCertified { get; set; }
        public CellData Paid { get; set; }
        public CellData CertifiedToDate { get; set; }
        public CellData Retentions { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public SubContractsSubContractKey OriginalKey { get; set; }
        public SubContractsSubContractKey CurrentKey { get; set; }
        public SubContractsSubContractKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class SubContractsSubContractKey
    {
        public string SubContractCode { get; set; }
    }

    public class TableApiRequest
    {
        public string TableName { get; set; }
        public string ColumnNames { get; set; }
        public int Page { get; set; }
        public int Rows { get; set; }
        public string Sidx { get; set; }
        public string Sord { get; set; }
        public List<DynamicPredicateRowApi> PredicateRows { get; set; }
    }

    public class GridResult_TableApiResponse
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<TableApiResponse> rows { get; set; }
    }

    public class TableApiResponse
    {
        public TableApiKey Key { get; set; }
        public string Col01 { get; set; }
        public string Col02 { get; set; }
        public string Col03 { get; set; }
        public string Col04 { get; set; }
        public string Col05 { get; set; }
        public string Col06 { get; set; }
        public string Col07 { get; set; }
        public string Col08 { get; set; }
        public string Col09 { get; set; }
        public string Col10 { get; set; }
        public string Tag01 { get; set; }
        public string Tag02 { get; set; }
        public string Tag03 { get; set; }
        public string Tag04 { get; set; }
        public string Tag05 { get; set; }
        public string Tag06 { get; set; }
        public string Tag07 { get; set; }
        public string Tag08 { get; set; }
        public string Tag09 { get; set; }
        public string Tag10 { get; set; }
    }

    public class TableApiKey
    {
        public string TableName { get; set; }
        public string KeyName { get; set; }
        public string KeyValue { get; set; }
        public string ColumnNames { get; set; }
    }

    public class TableApiLine
    {
        public TableApiKey Key { get; set; }
        public string Col01 { get; set; }
        public string Col02 { get; set; }
        public string Col03 { get; set; }
        public string Col04 { get; set; }
        public string Col05 { get; set; }
        public string Col06 { get; set; }
        public string Col07 { get; set; }
        public string Col08 { get; set; }
        public string Col09 { get; set; }
        public string Col10 { get; set; }
    }

    public class GridResult_TimesheetsAttendanceLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<TimesheetsAttendanceLine> rows { get; set; }
    }

    public class TimesheetsAttendanceLine
    {
        public string LineNo { get; set; }
        public string ShiftNo { get; set; }
        public string Shift { get; set; }
        public CellData Day1 { get; set; }
        public CellData Day2 { get; set; }
        public CellData Day3 { get; set; }
        public CellData Day4 { get; set; }
        public CellData Day5 { get; set; }
        public CellData Day6 { get; set; }
        public CellData Day7 { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public TimesheetsAttendanceKey OriginalKey { get; set; }
        public TimesheetsAttendanceKey CurrentKey { get; set; }
        public TimesheetsAttendanceKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class TimesheetsAttendanceKey
    {
        public ActionValues Action { get; set; }
        public int PersonId { get; set; }
        public DateTime TimesheetDate { get; set; }
        public enum ActionValues
        {
            FirstIn,
            FirstOut,
            SecondIn,
            SecondOut,
        }

    }

    public class TimesheetsDetailKey
    {
        public int JobTranId { get; set; }
        public int PersonId { get; set; }
        public string FinCoCode { get; set; }
        public string JobCode { get; set; }
        public string ActivityCode { get; set; }
        public string WorkCentreCode { get; set; }
        public string ActivityType { get; set; }
        public string ActivitySubType { get; set; }
        public string TimeCode { get; set; }
        public string CostType { get; set; }
        public double CostRate { get; set; }
        public double GstRate { get; set; }
        public int StatusFlag { get; set; }
        public DateTime TranDate { get; set; }
        public string EmployeeClass { get; set; }
    }

    public class TimesheetsDetailDefaults
    {
        public TimesheetsDetailDefaultsKey keys { get; set; }
    }

    public class TimesheetsDetailDefaultsKey
    {
        public string FinCoCode { get; set; }
        public CellData ActivityCode { get; set; }
        public string ActivityType { get; set; }
        public string ActivitySubType { get; set; }
        public double CostRate { get; set; }
        public string CostType { get; set; }
        public double GstRate { get; set; }
        public CellData WorkCentreCode { get; set; }
        public CellData TimeCode { get; set; }
        public DateTime TimesheetDate { get; set; }
        public string EmployeeClass { get; set; }
    }

    public class TimesheetApiKey
    {
        public int PersonId { get; set; }
        public DateTime TimesheetDate { get; set; }
        public FunctionalCodeValues FunctionalCode { get; set; }
        public enum FunctionalCodeValues
        {
            General,
            PurchaseOrders,
            PurchaseOrderApproval,
            PurchaseRequisitions,
            Timesheets,
            TimesheetReviews,
            TimesheetApproval,
            TimesheetApprovalList,
            ServiceLog,
            ServiceDesk,
            ExpenseClaims,
            ExpenseClaimReviews,
            ExpenseClaimApproval,
            ExpenseClaimAdminApproval,
            TabletTimesheet,
            TabletTimePlant,
            Scheduler,
            LeaveManagement,
            LeaveTypeManagement,
            CrewTimesheets,
            Refueling,
            HumanResources,
            DailyDiary,
            Datasheets,
            CreditCards,
            Stock,
            LogDaysheet,
            PortalPeople,
            PortalCompany,
            Workflow,
            Reporting,
            ProfitCentres,
            ExternalSalesCodes,
            InternalSalesCodes,
            ActivityReportCode,
            ProfitCentreReportCode,
            SalesCodeReportCode,
            Batch,
            Budget,
            Billing,
            TimeCodes,
            Disbursement,
            Jobs,
            ApInvoices,
            Adjustments,
            Plant,
            NonStockLocation,
            JobContract,
            Processes,
            JobReceipt,
            Forecast,
            SubContracts,
            WorkOrderApproval,
            StockItem,
            ApInvoiceApproval,
            ApCreditApproval,
            TimesheetAdminApproval,
            DocketEntry,
            Revenue,
            Vouchers,
            VoucherApproval,
            Quotes,
            ProductionMeasures,
            StockIssue,
            Utilities,
            SubcontractClaimWorkflowApproval,
            BulkInvoice,
            WorkOrder,
            Activities,
            SalesCodes,
            ContractorDaysheet,
        }

    }

    public class TimesheetApiModel
    {
        public bool Day1Complete { get; set; }
        public bool Day2Complete { get; set; }
        public bool Day3Complete { get; set; }
        public bool Day4Complete { get; set; }
        public bool Day5Complete { get; set; }
        public bool Day6Complete { get; set; }
        public bool Day7Complete { get; set; }
        public TimesheetApiAttendanceFields AttendanceFields { get; set; }
        public TimesheetsTimesheetFormResult Form { get; set; }
        public List<TimesheetsDailyDetailLine> Rows { get; set; }
        public List<Tuple_String> ReadonlyMessages { get; set; }
        public List<MvcValidationError> ValidationErrors { get; set; }
        public string WarningMessage { get; set; }
        public string SuccessMessage { get; set; }
        public string ErrorMessage { get; set; }
    }

    public class TimesheetApiAttendanceFields
    {
        public GridResult_TimesheetsAttendanceLine Rows { get; set; }
    }

    public class TimesheetsTimesheetFormResult
    {
        public TimesheetsKey Key { get; set; }
        public BoolViewData ApprovalOnHoldField { get; set; }
        public BoolViewData ApprovedField { get; set; }
        public BoolViewData CompletedField { get; set; }
        public string NoEditMessage { get; set; }
        public string TimesheetDate { get; set; }
        public bool TimesheetNew { get; set; }
        public StringViewData VarianceNotes { get; set; }
    }

    public class TimesheetsDailyDetailLine
    {
        public DateTime TranDate { get; set; }
        public string FinCoCode { get; set; }
        public CellData FileAttachment { get; set; }
        public CellData JobCode { get; set; }
        public CellData Action { get; set; }
        public CellData LogHeader { get; set; }
        public CellData WorkCentreCode { get; set; }
        public CellData Profile { get; set; }
        public CellData ActivityCode { get; set; }
        public CellData Allowance { get; set; }
        public string ActivityType { get; set; }
        public CellData TimeCode { get; set; }
        public CellData StartTime { get; set; }
        public CellData EndTime { get; set; }
        public CellData Breaks { get; set; }
        public CellData Quantity { get; set; }
        public CellData QuantityOnly { get; set; }
        public CellData NoteOnly { get; set; }
        public string Details { get; set; }
        public CellData Duplicate { get; set; }
        public CellData Delete { get; set; }
        public CellData PlantIssues { get; set; }
        public CellData Payroll { get; set; }
        public bool JobManagerApproved { get; set; }
        public int PlantIssuesCount { get; set; }
        public int StockIssuesCount { get; set; }
        public int SourceID { get; set; }
        public bool SourceIDSpecified { get; set; }
        public CellData TimesheetRef1 { get; set; }
        public CellData TimesheetRef2 { get; set; }
        public string EmployeeClass { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public TimesheetsDetailKey OriginalKey { get; set; }
        public TimesheetsDetailKey CurrentKey { get; set; }
        public TimesheetsDetailKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class TimesheetsKey
    {
        public int PersonId { get; set; }
        public DateTime TimesheetDate { get; set; }
        public FunctionalCodeValues FunctionalCode { get; set; }
        public enum FunctionalCodeValues
        {
            General,
            PurchaseOrders,
            PurchaseOrderApproval,
            PurchaseRequisitions,
            Timesheets,
            TimesheetReviews,
            TimesheetApproval,
            TimesheetApprovalList,
            ServiceLog,
            ServiceDesk,
            ExpenseClaims,
            ExpenseClaimReviews,
            ExpenseClaimApproval,
            ExpenseClaimAdminApproval,
            TabletTimesheet,
            TabletTimePlant,
            Scheduler,
            LeaveManagement,
            LeaveTypeManagement,
            CrewTimesheets,
            Refueling,
            HumanResources,
            DailyDiary,
            Datasheets,
            CreditCards,
            Stock,
            LogDaysheet,
            PortalPeople,
            PortalCompany,
            Workflow,
            Reporting,
            ProfitCentres,
            ExternalSalesCodes,
            InternalSalesCodes,
            ActivityReportCode,
            ProfitCentreReportCode,
            SalesCodeReportCode,
            Batch,
            Budget,
            Billing,
            TimeCodes,
            Disbursement,
            Jobs,
            ApInvoices,
            Adjustments,
            Plant,
            NonStockLocation,
            JobContract,
            Processes,
            JobReceipt,
            Forecast,
            SubContracts,
            WorkOrderApproval,
            StockItem,
            ApInvoiceApproval,
            ApCreditApproval,
            TimesheetAdminApproval,
            DocketEntry,
            Revenue,
            Vouchers,
            VoucherApproval,
            Quotes,
            ProductionMeasures,
            StockIssue,
            Utilities,
            SubcontractClaimWorkflowApproval,
            BulkInvoice,
            WorkOrder,
            Activities,
            SalesCodes,
            ContractorDaysheet,
        }

    }

    public class GridResult_TimesheetsListItem
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<TimesheetsListItem> rows { get; set; }
    }

    public class TimesheetsListItem
    {
        public CellData PersonName { get; set; }
        public string TimesheetDate { get; set; }
        public CellData Entered { get; set; }
        public CellData Standard { get; set; }
        public CellData Variance { get; set; }
        public bool Completed { get; set; }
        public bool Approved { get; set; }
        public CellData ExpenseClaim { get; set; }
        public DateTime UpdatedDate { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public TimesheetsKey OriginalKey { get; set; }
        public TimesheetsKey CurrentKey { get; set; }
        public TimesheetsKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class UploadedFileApiModel
    {
        public string FileName { get; set; }
        public string FileExtension { get; set; }
        public string ContentType { get; set; }
        public string RelatedRecordId { get; set; }
        public string RelatedRecordType { get; set; }
        public int StoredFileId { get; set; }
    }

    public class WorkBreakDownApiModel
    {
        public List<WorkBreakDownJob> Jobs { get; set; }
        public List<WorkBreakDownActivity> Activities { get; set; }
        public List<WorkBreakDownJobWorkCentre> WorkCentres { get; set; }
        public List<WorkBreakDownTimeCode> TimeCodes { get; set; }
    }

    public class WorkBreakDownJob
    {
        public string Code { get; set; }
        public string Description { get; set; }
        public string JobTypeCode { get; set; }
        public string JobManager { get; set; }
        public int JobManagerId { get; set; }
        public string AccountManager { get; set; }
        public int AccountManagerId { get; set; }
        public string CompanyName { get; set; }
        public int CompanyId { get; set; }
        public bool Closed { get; set; }
        public bool Finalised { get; set; }
        public bool HasJobWorkCentres { get; set; }
        public string DefaultActivity { get; set; }
        public List<string> Activities { get; set; }
        public DateTime LastModifyDate { get; set; }
    }

    public class WorkBreakDownActivity
    {
        public string Code { get; set; }
        public string Description { get; set; }
        public string ActivityType { get; set; }
        public string ActivitySubType { get; set; }
        public string WorkCentreCode { get; set; }
        public bool UseTimeCodes { get; set; }
        public string DefaultTimeCode { get; set; }
        public List<string> TimeCodes { get; set; }
    }

    public class WorkBreakDownJobWorkCentre
    {
        public string JobCode { get; set; }
        public string Code { get; set; }
        public string Description { get; set; }
    }

    public class WorkBreakDownTimeCode
    {
        public string Code { get; set; }
        public string Description { get; set; }
        public int LineType { get; set; }
        public bool IncCost { get; set; }
    }

    public class GridResult_AdminWorkCentreLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<AdminWorkCentreLine> rows { get; set; }
    }

    public class AdminWorkCentreLine
    {
        public string WorkCentreCode { get; set; }
        public string Description { get; set; }
        public string WorkCentreGroupCode { get; set; }
        public string CodeDescription { get; set; }
        public DateTime UpdatedDate { get; set; }
        public CellData WorkCentreCodeValue { get; set; }
        public CellData DescriptionValue { get; set; }
        public CellData WorkCentreGroupCodeValue { get; set; }
        public CellData Delete { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public AdminWorkCentreKey OriginalKey { get; set; }
        public AdminWorkCentreKey CurrentKey { get; set; }
        public AdminWorkCentreKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

    public class AdminWorkCentreKey
    {
        public string WorkCentreCode { get; set; }
    }

    public class GridResult_LookupsWorkCentreLine
    {
        public int total { get; set; }
        public int page { get; set; }
        public int records { get; set; }
        public List<LookupsWorkCentreLine> rows { get; set; }
    }

    public class LookupsWorkCentreLine
    {
        public CellData Code { get; set; }
        public string Description { get; set; }
        public string Status { get; set; }
        public int ReadonlyFlag { get; set; }
        public string ReadonlyMessage { get; set; }
        public LookupsLookupKey OriginalKey { get; set; }
        public LookupsLookupKey CurrentKey { get; set; }
        public LookupsLookupKey Key { get; set; }
        public int Index { get; set; }
        public CellData Extra1 { get; set; }
        public CellData Extra2 { get; set; }
        public CellData Extra3 { get; set; }
        public CellData Extra4 { get; set; }
        public CellData Extra5 { get; set; }
    }

}
